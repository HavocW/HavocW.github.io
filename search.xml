<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用443端口未被封锁的家宽建站</title>
      <link href="/posts/home-web-server.html"/>
      <url>/posts/home-web-server.html</url>
      
        <content type="html"><![CDATA[<h1 id="家宽建站"><a href="#家宽建站" class="headerlink" title="家宽建站"></a>家宽建站</h1><p>首先强调一点，家宽建站仅作为一次尝试，因为国内运营商是不允许家宽对外开放web服务的，要是被找出来可能会有一些麻烦…建议大家玩玩就好。<strong>首先要满足两点前提:</strong></p><ol><li>你的家宽有公网ip</li><li>当地运营商没有封锁443端口而是只封锁了80端口（比如我这，只阻断了80端口的tcp访问…甚至部分地区80端口也没有封锁？）</li></ol><p>大致思路很简单，就是使用cloudflare，开启https回源，让cloudflare的服务器访问源站（家宽下的服务器）的时候使用https访问443端口，另外强制https访问（即用户使用http访问你的网站的时候，在cloudflare处就转换为https）。</p><p>本文中，我直接使用了树莓派作为服务器。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，由于家宽是动态ip所以需要先配置好ddns，推荐使用该项目<a href="https://github.com.cnpmjs.org/NewFuture/DDNS，配合DNSPOD可以实现较快的解析。" target="_blank" rel="noopener">https://github.com.cnpmjs.org/NewFuture/DDNS，配合DNSPOD可以实现较快的解析。</a></p><p>另外建议使用第三方CNAME接入（方便自选节点），当然直接使用Cloudflare也是可以的，注册一个cloudflare账号。</p><h2 id="接入cloudflare"><a href="#接入cloudflare" class="headerlink" title="接入cloudflare"></a>接入cloudflare</h2><p><em>如果你不是用的dnspod这种智能解析的话，直接在cloudflare里面添加记录，CNAME到ddns的域名并开启cdn即可。</em></p><p>我这里使用了cf partner的cname接入，以<a href="https://cdn.moeelf.com/" target="_blank" rel="noopener">萌精灵</a>为例：</p><ol><li>添加一个CNAME记录，记录名为home 只想我们ddns的域名入 ddns.example.com</li><li>查看下面的CNAME记录，可以看到一个 home.example.com.cdn.cloudflare.net</li><li>在dnspod里面添加CNAME记录，记录名home，指向 home.example.com.cdn.cloudflare.net</li></ol><p>这样就完成了CNAME接入了，然后需要修改一些cloudflare的配置:</p><p>首先修改加密模式为“完全”，不然cloudflare会使用http协议回源，那就访问不到服务器了。</p><p><img src="https://i.loli.net/2020/05/28/wAzhQynCaW7Dg8s.png" alt="修改加密模式"></p><p>然后前往“边缘证书”页面，开启“始终使用https”，之后我们需要在服务器上安装证书，虽然可以使用自签名证书，但是既然都到这了，那就直接使用cf提供的证书吧，前往<em>源服务器</em>页面，点击<strong>创建证书</strong>，可以创建一个仅用于cloudflare服务器与源服务器之间的证书，分别由私钥和证书部分，保存到树莓派上。</p><p><em>/etc/nginx/ssl/cert.pem</em>,<em>/etc/nginx/ssl/key.pem</em>。</p><h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><p>安装好了nginx之后，修改配置文件 <code>nano /etc/nginx/site-available/default</code>。添加一个server配置:</p><pre><code>server {        root /var/www/html;        index index.html index.htm index.nginx-debian.html;        server_name berry.aoyouer.com;        autoindex on;        autoindex_exact_size off;        autoindex_localtime on;        location / {                # First attempt to serve request as file, then                # as directory, then fall back to displaying a 404.                try_files $uri $uri/ =404;        }    listen [::]:443 ssl;     listen 443 ssl;     ssl_certificate /etc/nginx/ssl/cert.pem;    ssl_certificate_key /etc/nginx/ssl/key.pem;}</code></pre><p>编辑好保存之后使用<code>systemctl restart nginx</code>重启一下nginx，之后再访问home.example.com理论上就可以看到nginx的默认页面了。</p><p><img src="https://i.loli.net/2020/05/28/J8GNVQI93ofC1iP.png" alt="nginx"></p><p>另外，如果只是想做个文件下载服务器的话，可以在站点配置文件里面加入下面几行来开启nginx的文件索引功能:</p><pre><code>        autoindex on;        autoindex_exact_size off;        autoindex_localtime on;</code></pre><p>虽然现在用的是树莓派，不过真的想要用家宽建站的话，完全可以换成更强劲的机器，另外国内到国外的上传速度其实挺快的，基本能跑满上传。就这样，一个免费的（当然还是要电费和网费），性能强劲的建站方案就出现了，当然这种方案玩玩就好，正经做站还是别这样，毕竟存在一定的风险，并且家宽说不定什么时候不稳定断网了/家里停电了呢？</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> 折腾 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派超频</title>
      <link href="/posts/raspberry-overclock.html"/>
      <url>/posts/raspberry-overclock.html</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派3b修改为64位raspbian并进行超频"><a href="#树莓派3b修改为64位raspbian并进行超频" class="headerlink" title="树莓派3b修改为64位raspbian并进行超频"></a>树莓派3b修改为64位raspbian并进行超频</h1><p>前段时间从别人那听说树莓派4可以超频到2ghz，虽然我没有树莓派4，但是有一个吃灰的树莓派3，所以也想着试试超频。除此之外，现在官方的raspbian已经支持64位了，不过需要我们修改config.txt来实现。</p><h2 id="开启64位"><a href="#开启64位" class="headerlink" title="开启64位"></a>开启64位</h2><p>修改config.txt</p><p>在末尾增加一行<code>arm_64bit=1</code>，重启，此时已经是64位系统了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0529.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="超频"><a href="#超频" class="headerlink" title="超频"></a>超频</h2><p>超频的话如果电源不足的话会直接死机，所以我使用了5V2A的电源才没有提示低电压警告。</p><p>查看当前的核心以及内存电压:</p><p><code>for id in core sdram_c sdram_i sdram_p ; do echo -e &quot;$id:\t$(vcgencmd measure_volts $id)&quot; ; done</code></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0443.png" alt=""></p><p>监控温度</p><p><code>while true ; do vcgencmd measure_temp ; sleep 1 ; done</code></p><p>对于计算能力的测试可以使用下面的命令来创建4个线程来寻找√20000以内的质数</p><p><code>sysbench --num-threads=4 --test=cpu --cpu-max-prime=20000 run</code></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0446.png" alt="未修改"></p><p>我们先尝试超频到1.3ghz，在 /boot/config.txt末尾添加如下内容</p><pre><code>core_freq=500 # GPU Frequency arm_freq=1300 # CPU Frequency gpu_freq=450over_voltage=5 #Electric power sent to CPU / GPU (4 = 1.3V) disable_splash=1 # Disables the display of the electric alert screen</code></pre><p>保存后再重启，查看此时的核心电压:</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0451.png" alt=""></p><p>再次进行测试，可以看到，温度变高了，速度嘛。。也提升了一点。<strong>注意，默认达到85℃是会降频的。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0453.png" alt=""></p><p>之后的测试中，改成1400Mhz之后居然直接无法启动了，修改成1350Mhz后虽然可以启动，但是开始测试之后没多久就死机了，由于我使用的是金属外壳被动散热的方式，所以温度控制的不太好，如果你的电源更好一些或者散热条件更好一些可以试试更高的频率，除此之外，gpu，内存甚至sd卡的频率都是可以超的，可以查看下面的文档。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md" target="_blank" rel="noopener">https://www.raspberrypi.org/documentation/configuration/config-txt/overclocking.md</a></p><p><a href="https://yanke.info/?id=96" target="_blank" rel="noopener">https://yanke.info/?id=96</a></p><p><a href="https://www.freebuf.com/geek/161452.html" target="_blank" rel="noopener">https://www.freebuf.com/geek/161452.html</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/helloworld.html"/>
      <url>/posts/helloworld.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Telegram指南</title>
      <link href="/posts/hello-telegram.html"/>
      <url>/posts/hello-telegram.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Telegram"><a href="#Hello-Telegram" class="headerlink" title="Hello Telegram"></a>Hello Telegram</h1><p>由于QQ群发展比较迅速，很快就达到了500人，而群主又不想再给腾讯送钱，所以决定采用更加好用(至少是个人觉得)的Telegram群组，但是由于众所周知的原因，此类软件在国内肯定是逃不掉被墙的命运，不过为了更好的体验，还是稍微麻烦一下自己爬爬墙吧…这篇文章介绍了Telegram该如何使用，给大家指指路。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>其实telegram的最初定位类似于微信这类基于手机通信录的社交软件，所以注册的时候必须使用手机号…</p><p>如果你有手机号并且你愿意使用你的真实手机号注册那就直接用你的手机号注册吧(部分地区的手机号可能存在无法收到验证短信的情况，不过我个人是没遇见这种情况)。</p><p>如果你没有手机号/不想用真实手机号/收不到验证码也可以采用虚拟手机号注册的方式,下面以虚拟手机号<strong>Textnow</strong>注册来展示流程。 <strong>注意 虚拟手机号随时有可能被收回  另外textnow现在貌似需要北美地区ip才能注册了 所以还是建议你们用真实手机号注册。或者使用google voice之类可以长期保有的虚拟号</strong></p><h3 id="Textnow"><a href="#Textnow" class="headerlink" title="Textnow"></a>Textnow</h3><blockquote><p><a href="https://www.shixingceping.com/tag/textnow/" target="_blank" rel="noopener">Textnow</a>成立于2009年，是美国最大的免费电话服务提供商，<a href="https://www.shixingceping.com/tag/textnow/" target="_blank" rel="noopener">TextNow</a>应用程序在全球的下载量已超过2亿次，帮助数百万人使用免费电话保持联系通过移动应用程序拨打电话号码。目前提供IOS、安卓、windows系统的下载方式，mac暂时没找到，当然你也可以使用网页登录</p></blockquote><p>更详细的流程可以查看 <a href="https://www.shixingceping.com/archives/210.html" target="_blank" rel="noopener">https://www.shixingceping.com/archives/210.html</a></p><p>注册好账号后他会让你输入一个区号(<a href="https://wenku.baidu.com/view/bf73ed71bfd5b9f3f90f76c66137ee06eff94e8b.html" target="_blank" rel="noopener">美国的区号</a>) 比如我这里使用了 218 明尼苏达</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0330.png" alt=""></p><p>然而由于我当前ip在德国，所以无法分配到电话号码。这里还有可能会有另外一种报错，提示你他们也没有电话号码了，遇到这种情况的话请更换区号再次申请</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0331.png" alt=""></p><p>在我使用了美国的代理之后再次申请，一次就通过了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0336.png" alt=""></p><p>另外</p><blockquote><p>Don’t forget to send a message or call one of your contacts to make sure you don’t lose your number, </p></blockquote><p>如果你打算长期使用这个账号，别忘了定期给这个电话号码发短信避免账号被收回</p><p>其实只要你有一个客户端登录过telegram，且不注销登录的话，之后的登录都不再需要电话号码了，即使收回了问题也不大，但是如果你所有的客户端都注销了登录的话 ，就必须要使用短信验证登录了。</p><h3 id="注册时代理问题"><a href="#注册时代理问题" class="headerlink" title="注册时代理问题"></a>注册时代理问题</h3><p>注意Telegram在中国大陆是被墙了的，不使用代理可能连注册都注册不了，无限转圈圈…所以需要使用代理 如 V2ray shadowsocks等软件，考虑到部分群员之前从来都没使用这类软件，为了方便使用也可以使用mtproxy，mtproxy属于telegram的内置代理,你可以理解成这个代理只有telegram可以用，这样的话就不需要再额外去配置那些代理软件了。以手机为例子:</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0355.png" alt="点击开始聊天"></p><p>如果你一开始没有使用代理的话，注册的时候会一直显示 “连接中”，遇到这种情况请点击上面这一栏“连接中”文字的右边这部分，会跳到代理设置界面。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0356.png" alt=""></p><p>使用MTProto代理，我这里提供一个代理(过段时间可能会挂掉?)</p><p>204.152.210.156</p><p>19132</p><p>密匙请查看群公告获取</p><p><strong>群员专用！请勿公开 公开之后被封的可能性更大！！</strong></p><p>另外分享一个telegram频道，在你注册完毕之后可以加入这个频道，这个频道会分享一些免费的Mtproto代理</p><p><a href="https://t.me/MTProtoShare" target="_blank" rel="noopener">https://t.me/MTProtoShare</a></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0357.png" alt=""></p><p>打勾之后等待一会就能看见是否连接成功了，记得打开“使用代理”。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0400.png" alt=""></p><p>之后填上你的手机号即可注册了。 Textnow去网页/APP里面查看（记得定期发短信给你的虚拟号呀，不然会被收回的）</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0353.png" alt="Textnow接收验证码"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0402.png" alt="注册成功"></p><p>PC上的操作也大同小异，注意PC的代理设置在左下角。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="设置中文"><a href="#设置中文" class="headerlink" title="设置中文"></a>设置中文</h3><p>Telegram是没有官方中文的，不过可以使用第三方汉化包，只需要在telegram里面点击这个链接 tg://setlanguage?lang=zhcncc 就好了(你可以发出去自己点)</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0404.png" alt=""></p><p>或者在搜索栏输入@tele_zh_cn 进入汉化者的频道。</p><h3 id="隐私设置"><a href="#隐私设置" class="headerlink" title="隐私设置"></a>隐私设置</h3><p><strong>这点尤其重要！！！尤其是当你使用真实手机号注册的时候，陌生人在添加联系人后是可以看到你的手机号的！！</strong></p><p>所以请前往设置-隐私设置里面把手机号设置为不可见</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0406.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/0407.png" alt="记得设置成不允许任何人！"></p><h2 id="我要说的"><a href="#我要说的" class="headerlink" title="我要说的"></a>我要说的</h2><p>Telegram是一个相对自由得多的聊天软件，这里没有那么多的管控，但同时这里也有很多灰/黑产以及各类违法不良的信息存在，请大家提高自己的分辨能力，不要人云亦云。另外，我的群组禁止敏感话题的讨论，如政治/引战类讨论（包括贴图），以及各类色情内容(包括贴图)，希望大家能体验体验一个更好的(我认为的）的社交软件。</p><hr><p>感兴趣的话点击广告，支持一下~</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> telegram </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只有ipv6的vps怎么玩</title>
      <link href="/posts/ipv6-only-vps.html"/>
      <url>/posts/ipv6-only-vps.html</url>
      
        <content type="html"><![CDATA[<h1 id="纯ipv6机器怎么玩"><a href="#纯ipv6机器怎么玩" class="headerlink" title="纯ipv6机器怎么玩"></a>纯ipv6机器怎么玩</h1><p>euserv在前段时间推出了仅有ipv6免费机器，本着免费的机器不玩白不玩的原则，并且以前从没有玩过只有ipv6的机器，所以我也去弄了一台来折腾。总的感觉就是cpu很差，io很一般，但是网络速度(在欧洲区域)很不错。<br><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1154.png" alt="虽然硬件很一般 但是网络真的很不错"><br>另外他家不同时期开机的机器差别相当的大，有的负载才4，有的负载能到120…<br>另外他家的免费机器都是LXC的，其实只能算是一个容器,不要再尝试安装bbr了，装不上的。</p><blockquote><p>一种操作系统层虚拟化（Operating system–level virtualization）技术，为Linux内核容器功能的一个用户空间接口。它将应用软件系统打包成一个软件容器（Container），内含应用软件本身的代码，以及所需要的操作系统核心和库。通过统一的名字空间和共用API来分配不同软件容器的可用硬件资源，创造出应用程序的独立沙箱运行环境，使得Linux用户可以容易的创建和管理系统或应用容器。</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>申请到机器之后先去面板重装系统，重装系统耗时不定，有时候很快，但有些时候极其慢，我这次使用的是ubuntu1804.</p><p>首先由于这是一台纯ipv6的机器，如果我们家里只有ipv4网络的话，是连不上ssh的，解决方案有挺多</p><ul><li>使用具有ipv6的vps作为跳板进行ssh连接 我采用了该种方法</li><li>使用he.net的tunnelbroker获取一个ipv6公网地址 </li><li>使用网上的专门的ipv6面板连接 感觉会有些安全问题？</li></ul><p>另外如果你有一台同时具有ipv6与ipv4的服务器的话，可以使用该服务器作为frp服务端，这样就可以直接通过v4地址连接了。</p><p>机器到手之后，先<code>apt update &amp;&amp; apt upgrade</code>升级系统，领的这台机器可能同一批通过了不少的机器，所以这时io极差，装了很久才更新完毕。</p><h3 id="NAT64访问纯ipv4资源"><a href="#NAT64访问纯ipv4资源" class="headerlink" title="NAT64访问纯ipv4资源"></a>NAT64访问纯ipv4资源</h3><p>因为vps默认只有ipv6地址，所以默认无法访问纯ipv4的站点，但是我们可以使用公共DNS6to4服务(也可以自己搭建)<a href="https://zh.wikipedia.org/wiki/NAT64，正好有个德国的dns64服务器，而且速度相当快，能跑到50~100M左右。" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/NAT64，正好有个德国的dns64服务器，而且速度相当快，能跑到50~100M左右。</a></p><p>修改<code>/etc/resolv.conf</code>的nameserver 改成下面几个dns之一(选一个就好)</p><ul><li>nameserver 2a03:7900:2:0:31:3:104:161  (荷兰)</li><li>nameserver 2001:67c:2b0::4 (芬兰)</li><li>nameserver 2a09:11c0:f1:bbf0::70</li><li>更多的dns64 <a href="https://nat64.xyz/" target="_blank" rel="noopener">https://nat64.xyz/</a></li></ul><p>之后再尝试下载ipv4服务器上的文件，发现可以成功。</p><blockquote><p>简单的NAT64设置可能是一个设备的两个接口分别连接到IPv4网络与IPv6网络的网关。IPv6网络的流量经由网关路由，其对两个网络之间传送的分组进行所有必要的翻译。但是，这种翻译并不是对称的，<a href="https://zh.wikipedia.org/wiki/NAT64#cite_note-AMavrin-Nat64-3" target="_blank" rel="noopener">[3]</a>因为<a href="https://zh.wikipedia.org/wiki/IP地址#IPv6位址" target="_blank" rel="noopener">IPv6地址</a>空间比<a href="https://zh.wikipedia.org/wiki/IPv4" target="_blank" rel="noopener">IPv4地址</a>空间大得多，因此就不可能进行一对一的地址映射。网关维护IPv6到IPv4的地址映射，而该映射可以在来自IPv6网络的第一个分组到达NAT64网关时手动创建（无状态映射），也可自动创建（有状态映射）。</p><p>如果NAT64翻译器是用于使仅有IPv4的服务器能被远端仅有IPv6的客户端访问，则比较适合使用无状态转换。有状态转换适合在客户端或服务提供商部署，使仅有IPv6的客户端主机能联系远端的仅有IPv4的节点。</p><p>通常来说，NAT64被设计为在IPv6主机发起通信时使用。但也存在一些机制允许反向场景，例如静态地址映射。<a href="https://zh.wikipedia.org/wiki/Wikipedia:列明来源" target="_blank" rel="noopener">[来源请求]</a></p><p>不是每种类型的资源都能用NAT64访问。嵌入IPv4字面地址的协议（例如<a href="https://zh.wikipedia.org/wiki/会话发起协议" target="_blank" rel="noopener">SIP</a>和<a href="https://zh.wikipedia.org/wiki/会话描述协议" target="_blank" rel="noopener">SDP</a>、<a href="https://zh.wikipedia.org/wiki/文件传输协议" target="_blank" rel="noopener">FTP</a>、<a href="https://zh.wikipedia.org/wiki/WebSocket" target="_blank" rel="noopener">WebSocket</a>、<a href="https://zh.wikipedia.org/wiki/Skype" target="_blank" rel="noopener">Skype</a>、MSN等）都不能得到支持，但双栈<a href="https://zh.wikipedia.org/wiki/代理服务器" target="_blank" rel="noopener">网页代理</a>允许仅IPv6客户端访问使用IPv4字面地址的URL。不过，使用NAT64的<a href="https://zh.wikipedia.org/wiki/IPv6转换机制" target="_blank" rel="noopener">464XLAT</a>（描述于RFC 6877）允许此类协议通过仅IPv6连接。对于SIP和FTP来说，使用<a href="https://zh.wikipedia.org/wiki/應用層閘道" target="_blank" rel="noopener">应用层网关</a>（ALG）技术可以解决问题，或者使用RFC 7225中PREFIX64扩展指定的<a href="https://zh.wikipedia.org/w/index.php?title=端口控制协议&action=edit&redlink=1" target="_blank" rel="noopener">端口控制协议</a>。</p></blockquote><h3 id="通过CDN使得ipv4可以访问网站"><a href="#通过CDN使得ipv4可以访问网站" class="headerlink" title="通过CDN使得ipv4可以访问网站"></a>通过CDN使得ipv4可以访问网站</h3><p>这个服务器的配置虽然比较辣鸡…而且随时有删号的风险，但是依旧可以用来挂个小网站玩玩(注意备份)，然而服务器只有ipv6，那么该怎么让只有ipv4的用户访问我们的网站呢？CDN在这里就可以起到作用了，以cloudflare为例子，当用户访问套上了cdn的网站时，cloudflare会向源服务器回源，cloudflare可以使用ipv6回源，以ipv4来进行展示。</p><p>这里使用了CNAME接入的方式来使用CDN</p><p>首先注册DNSPOD的账号，并添加域名，一开始会显示域名服务器异常，提示需要修改域名服务器，我们需要前往购买域名的地方，将Name Server修改成DNSPOD提示的那两个域名服务器（如 f1g1ns1.dnspod.net、f1g1ns2.dnspod.net），等待一段时间后刷新，生效。</p><p>在DNSPOD里面添加AAAA记录指向vps的ipv6地址 该记录称为 v6.example.com</p><p>然后前往cloudflare partner的面板（网上有很多 如挖站否，笨牛，萌精灵等等搜索一下就找得到了）可能需要你先创建一个cloudflare账号，部分面板会自动帮你创建。</p><p>在cfp面板里面添加根域名 example.com。</p><p>然后添加一条CNAME记录，指向我们刚才添加的那个AAAA记录 如 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> -&gt; v6.example.com 同时选择CDN开启，注意，这里只是在cloudflare里面添加了此CNAME记录，要让其生效我们<strong>还需要修改</strong>DNSPOD中的内容，先前往cfp的管理面板，查看我们刚才添加的CNAME记录，在<strong>CNAME接入</strong>标题下能看见一个表格，里面有形如 <code>www.example.com  www.example.com.cdn.cloudflare.net</code>这样的记录，于是我们需要复制后者，在DNSPOD里面添加一条CNAME记录 www 指向 <code>www.example.com.cdn.cloudflare.net</code>。此时我们已经成功使用CNAME接入了cloudflare。</p><h4 id="https的配置"><a href="#https的配置" class="headerlink" title="https的配置"></a>https的配置</h4><p>虽说使用CDN后源站是不是https都影响不大了，但是为了之后的代理服务器搭建做准备，我们也需要一个tls证书，所以还是使用certbot来一键申请https并配置证书。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common<span class="token function">sudo</span> add-apt-repository universe<span class="token function">sudo</span> add-apt-repository ppa:certbot/certbot<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> certbot python3-certbot-nginx<span class="token comment" spellcheck="true">#最后输入</span><span class="token function">sudo</span> certbot --nginx<span class="token comment" spellcheck="true">#按照要求输入邮箱 以及域名 域名就输入 www.example.com</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1137.png" alt="最后如图显示的时候就成功了"></p><p>尝试着访问 <code>www.example.com</code></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1138.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="代理服务器的搭建"><a href="#代理服务器的搭建" class="headerlink" title="代理服务器的搭建"></a>代理服务器的搭建</h3><p>代理我们使用 V2ray + ws + tls 的方式来使用，当然如果想让仅有ipv4的机器也能使用该代理我们就得用上刚才的CDN。</p><p>由于手动配置v2ray较为麻烦，所以我是用<a href="https://github.com/sprov065/v2-ui" target="_blank" rel="noopener">v2-ui</a>来进行搭建。</p><p><code>bash &lt;(curl -Ls https://blog.sprov.xyz/v2-ui.sh)</code></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1022.png" alt="安装成功后的显示"></p><p>另外注意一点，如果你没有ipv6的话你访问不了这个端口，要么使用nginx反代这个端口并通过cdn访问(我没试过)，或者frp到既有ipv4也有ipv6的机器上，来访问(我使用的是后者)。</p><p>使用面板默认密码进入面板后建议先去面板设置修改密码(需要重启才能生效)</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1028.png" alt=""></p><p>然后前往账号列表，点击加号添加一个账号。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1032.png" alt=""></p><p>注意几点:</p><ul><li><p>由于我们需要nginx反代，所以监听ip写127.0.0.1就够了</p></li><li><p>tls打开，域名写之前certbot申请证书所用的域名</p></li><li><p>证书文件路径</p><p>证书路径 /etc/letsencrypt/<a href="http://www.example.com/cert.pem" target="_blank" rel="noopener">www.example.com/cert.pem</a> ( 自己到这里看)</p></li><li><p>密钥文件路径</p><p>/etc/letsencrypt/<a href="http://www.example.com/privkey.pem" target="_blank" rel="noopener">www.example.com/privkey.pem</a></p></li></ul><p>点击添加即可。</p><h4 id="设置nginx反向代理"><a href="#设置nginx反向代理" class="headerlink" title="设置nginx反向代理"></a>设置nginx反向代理</h4><p>由于需要使用CDN，所以我们需要使用nginx进行反向代理,让该服务能通过443端口来访问。</p><p>编辑站点配置文件(如果你是使用certbot配置的https，那么站点配置文件就是/etc/nginx/sites-available/default)</p><p>在包含 <em>listen [::]:443 ssl*的那个server{}内添加如下内容 *注意location和你之前添加的时候写的路径要对应</em></p><pre><code>    location /v2ray {        proxy_redirect off;        proxy_pass https://127.0.0.1:10000;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }</code></pre><p>然后<code>systemctl restart nginx</code>重启nginx。</p><p>此时再访问 <a href="https://www.example.com/v2ray" target="_blank" rel="noopener">https://www.example.com/v2ray</a> 如果显示bad request则表示设置成功。</p><p> 最后在v2-ui里面点击分享，获取vmess的url，然后在v2rayn之类的软件中使用从剪贴板导入的功能，别忘了把端口修改成443（默认是反代前的端口）</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1040.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020052020/05/1041.png" alt=""></p><p>大功告成。</p><h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><ul><li>设置好了nat64之后 纯ipv6机器也可以直接frp到纯ipv4的服务器上..不过对网络质量要求有些高。</li></ul><h2 id="附tunnelbroker获取公网ipv6"><a href="#附tunnelbroker获取公网ipv6" class="headerlink" title="附tunnelbroker获取公网ipv6"></a>附tunnelbroker获取公网ipv6</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://miaotony.xyz/2020/03/03/Server_ObtainIPv6ViaTunnelBroker/#toc-heading-5" target="_blank" rel="noopener">https://miaotony.xyz/2020/03/03/Server_ObtainIPv6ViaTunnelBroker/#toc-heading-5</a></p><p><a href="https://loukky.com/archives/951" target="_blank" rel="noopener">https://loukky.com/archives/951</a></p><hr><p><em>感兴趣的话点点广告支持一下~</em></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> 玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>天翼网盘的正确食用方法 扩容/会员/直链</title>
      <link href="/posts/189cloud.html"/>
      <url>/posts/189cloud.html</url>
      
        <content type="html"><![CDATA[<h1 id="天翼网盘1T家庭云-会员-以及直链下载"><a href="#天翼网盘1T家庭云-会员-以及直链下载" class="headerlink" title="天翼网盘1T家庭云/会员/以及直链下载"></a>天翼网盘1T家庭云/会员/以及直链下载</h1><p>这几天了解到了天翼网盘，并进行了一些尝试，发现目前的体验要比百度盘好太多了，最近可以领取三个月的黄金会员，并且可以永久增加1T的家庭云空间(以前还有一些更好的活动，如10T，2T个人网盘的永久扩容，不过没赶上)。而且即使是不充会员，普通用户也可以高速下载文件，尤其是电信用户下载速度那就更快了，而且比百度盘好的是，天翼网盘的下载不强制你使用他们的客户端，只需要登陆就好了，甚至配合一些程序，可以直接获得直链而不需要登陆就可以下载。<em>虽然这种方式可能说不定什么时候就被和谐了,也不知道未来的天翼网盘会不会像现在的百度网盘一样下载限速且必须使用客户端，但是至少目前，天翼网盘的体验要远远好过百度网盘</em></p><blockquote><p>一开始的准备</p><p>手机，手机号，并安装天翼云盘的app</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="领取3个月黄金会员"><a href="#领取3个月黄金会员" class="headerlink" title="领取3个月黄金会员"></a>领取3个月黄金会员</h2><p>最近天翼网盘可以领取三个月的黄金会员，该会员可以获得4T的个人云，2T的家庭云空间，单日可以上传200GB(普通会员标称2G，但是目前实际可以上传50GB这样，下载不限制)，所以还是值得领取的。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0231.png" alt="App中找到云盘会员免费领"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0232.png" alt="完成下面的两个任务即可"></p><h2 id="家庭云扩容1T"><a href="#家庭云扩容1T" class="headerlink" title="家庭云扩容1T"></a>家庭云扩容1T</h2><p>默认的账号只有30GB的个人云以及30GB的家庭云，这里说一下家庭云和个人云的区别，家庭云相当于一个多人共享的空间，家庭云中的文件没办法直接分享出去，但是你可以把别人邀请进你的”家庭”，然后他就能看到你上传到家庭云中的所有文件了，家庭云中的文件也可以直接转存到个人云中。一个账号可以加入多个家庭云群组中。如果你要保存大量文件，又不想充会员…那么可以考虑把部分文件存到家庭云中，需要分享的时候再转存到个人云中便可生成分享链接。最近可以永久把家庭云的储存空间扩容到1T，虽然比不上曾经的个人云扩容1T甚至10T等活动，但是毕竟也能增加不少的空间，还是可以一试的。<em>该活动那个2020.6.30号结束</em></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0238.png" alt="在app的&quot;我的&quot;标签页下找到领取1T云空间的宣传"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0239.png" alt="完成任务领取1T的家庭云空间"></p><p>邀请两位家庭成员这里，输入对方的电话号码(他也会收到短信)就可以完成添加了，之后可以去家庭管理中删除成员。完成操作后你就会收到短信提醒你1T家庭云空间领取成功。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="Sharelist直链下载"><a href="#Sharelist直链下载" class="headerlink" title="Sharelist直链下载"></a>Sharelist直链下载</h2><p>重点来了~</p><p>领取了会员以及家庭云空间后我们便可以向天翼云盘中存资源了，天翼的分享下载要比百度好得多，不强制你是用他们的客户端，并且普通用户下载速度也可以很快(至少跑满了我家的百兆)，不过使用分享链接下载的时候下载者也需要登陆天翼云的账号。那么有没有一种更好的方法，可以直接获取下载直链，不登陆就能下载呢？</p><p>在这里要用到<strong><a href="https://github.com/reruin/sharelist" target="_blank" rel="noopener">Sharelist</a></strong> <a href="https://github.com/reruin/sharelist" target="_blank" rel="noopener">https://github.com/reruin/sharelist</a></p><blockquote><p>ShareList 是一个易用的网盘工具，支持快速挂载 GoogleDrive、OneDrive ，可通过插件扩展功能。</p></blockquote><p>该程序可以直接在服务器上挂载多种网盘(也包括天翼网盘),并获得直链实现免登录下载。 <strong>由于登陆会出现验证码…当前Sharelist挂载天翼云可能会失败 提示你密码错误</strong></p><p>不过需要注意的是，虽然目前该方法可用，但是并不代表永远可行，这个方法被和谐的可能性还是相当大的，因为可以直接获得直链，意味着很多的盗版站/视频站可以直接使用天翼网盘来储存资源。薅电信羊毛，自己弄着玩一下可以，但是还是不是特别建议使用该方法来将天翼云当作自己网站的对象储存来用,要是哪天这个方法和谐了，你的网站资源全部都无法使用了岂不是很尴尬? <em>以及自从pandownload的事件发生以来，不少类似的项目都被作者主动删除了，所以珍惜能用的时光吧~</em></p><p>部署起来很容易，作者提供了一键安装脚本。</p><p><code>wget --no-check-certificate -qO-  https://raw.githubusercontent.com/reruin/sharelist/master/netinstall.sh | bash</code></p><p>等待一段时间后，就能看到安装完成的提示</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0253.png" alt=""></p><p>此时当前目录下已经多了个名为<em>sharelist</em>的文件夹了，并且sharelist已经开始运行了，默认使用33001端口，直接访问即可，之后如果要手动启动sharelist的话，到sharelist文件夹中使用<code>node app.js</code>即可。</p><p>在浏览器中输入ip:33001即可进入sharelist的页面，首次访问时会让你设置站点名字/口令(密码)/挂载方式等信息，注意，目前版本一开始的挂载方式是看不到<strong>天翼云 账号登陆版</strong>的，随便选一个就好，我们稍后再改，设置好之后我们点击<strong>管理</strong>，向下滚动页面找到虚拟路径，再修改挂载方式，发现这里就能看到 <strong>天翼云 账号登陆版</strong>的选项了，名称填<strong>ctcc</strong>，挂载路径填//用户名(手机号)/初始文件夹ID?password=密码，保存之后再次访问3301，发现会要求你输入天翼云的用户名(手机号)以及密码，照着输入即可，登录之后便可以直接获取直链下载了。</p><p><strong>注意！！！如果你挂载路径写的/，那么sharelist是所有人都可以访问的，相当于别人都能看到你的网盘中的文件，如果你只想分享部分文件夹的话，需要去管理中修改虚拟路径  //用户名/初始文件夹ID?password=密码 初始文件夹id就是你打开一个文件夹后显示在浏览器url中的id，修改后可能还得重启一下才能生效</strong>。</p><p>由于使用帐户密码登陆的挂载方式可能会出现验证码，而当前版本的sharelist无法处理，在登陆几次之后我遇到了无法登录的情况(我换了台vps又暂时好了)。所以配置好之后就<strong>不要随便退出了,更加不要清除缓存</strong>,不然这个ip一段时间内登陆都会弹出验证码(sharelist就登不上去了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0257.png" alt=""></p><p><em>另外也可以使用docker的方式来部署，我没有尝试就不写了，感兴趣的可以查看github页面</em>。</p><h3 id="nginx反代"><a href="#nginx反代" class="headerlink" title="nginx反代"></a>nginx反代</h3><p>做完上面这些步骤我们已经可以通过sharelist获得天翼网盘中的文件的下载直链了，不过我希望使用443端口，并开启https，所以我考虑使用nginx来进行反向代理，我这里只说明nginx的location怎么填写。</p><p>编辑 /etc/nginx/site-available/ 中的站点文件。</p><pre><code>        location / {        proxy_redirect off;        proxy_set_header Host  $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;        proxy_set_header Range $http_range;        proxy_set_header If-Range $http_if_range;        proxy_no_cache $http_range $http_if_range;        proxy_pass http://127.0.0.1:33001;        }</code></pre><p>重启nginx再访问cloud.example.com，发现成功访问，大功告成。</p><p>试试直接复制文件url并使用wget下载。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0400.png" alt="跑满了本地带宽"></p><p>我再放一个网盘中的视频来测试效果:</p>  <link href="https://vjs.zencdn.net/7.7.5/video-js.css" rel="stylesheet" />  <script src="https://vjs.zencdn.net/ie8/1.1.2/videojs-ie8.min.js"></script>  <video    id="my-video"    class="video-js"    controls    preload="auto"    width="700"    height="350"    data-setup="{}"  >    <source src="https://cloud.aoyouer.com/video/1_4974612021954740404.mp4" type="video/mp4" /></video><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> 网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buyvm拉斯维加斯配置升级后测试</title>
      <link href="/posts/buyvm-ryzen-vps.html"/>
      <url>/posts/buyvm-ryzen-vps.html</url>
      
        <content type="html"><![CDATA[<h1 id="Buyvm拉斯维加斯配置升级后测试"><a href="#Buyvm拉斯维加斯配置升级后测试" class="headerlink" title="Buyvm拉斯维加斯配置升级后测试"></a>Buyvm拉斯维加斯配置升级后测试</h1><p>大概两个月前，Buyvm给用户发了一封邮件，说他们要升级cpu为3900x，并且把sata ssd升级成nvme的ssd，io也会有较大的提升，等了两个来月，某天上线的时候我发现cpu型号已经变了，而<a href="https://my.frantech.ca/" target="_blank" rel="noopener">官网</a>的产品也已经全部改名为LV RYZEN KVM(只有拉斯维加斯升级了)，价钱还是维持原价。<br>邮件如下:</p><blockquote><p>Today we are happy to announce a complete overhaul of all of our KVM Slice nodes to AMD Ryzen 3900X CPUs. Our originally advertised 3.5GHz clocks will increase to 3.8GHz with a boost clock of 4GHz+ (we are seeing an average boost clock of 4.1GHz on most cores). Storage will also be upgraded from SATA SSDs to NVME SSDs, which will increase IO performance by 4x or more</p><p>Network connectivity will be upgraded from 1Gbit to 10Gbit. While your service will remain capped at 1Gbit in each direction, we are considering uncapping inbound speeds for long term customers (customers who have had an active service for &gt;6 months for example). We haven’t given this too much thought yet but many users have shown interest in veteran perks.</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>先大致说一下他家的特点吧，buyvm工作人员上班后会补货,时间不确定，从晚上23:00~次日7:00差不多都有可能…低价机型2美元款补货量较少，而每月月初会比较大量的补货。低价机型应该是4人共享一个核心(其实我觉得也算不错了，只要别遇上太折腾的领居)，每加1.25美元可以增加256GB的块储存，块储存的读写速度要慢很多，但是毕竟便宜。带宽为G口不限流量，就算一直跑应该也不会受到限制(之前的邮件还说他们将带宽升级到10Gbps了，但是用户峰值还是1Gbps，对于部分老用户如有大于六个月有效服务的用户不限制入站速度。</p><p>无限流量配合廉价块储存，有不少人用来跑pt下载。但是对于<strong>想用Buyvm拉斯维加斯来进行上网代理的人要注意了</strong>，大概从今年开始Buyvm到联通的速度大不如从前，之前走he.net到联通全天都能跑到将近百兆，但是今年以来只有白天能跑个几十兆，到了晚上就几乎没有速度了。如果要买的话建议使用支付宝付款，paypal对个人资料审核较严，可能会被砍单？而且支付宝付款用的加元结算，要比两美元还便宜那么一些。</p><p>下面使用的测试机型为2美元款的拉斯维加斯，测试时间为早上。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="脚本测试"><a href="#脚本测试" class="headerlink" title="脚本测试"></a>脚本测试</h3><p><em>感觉白天的网络测试结果看上去还行…到了晚上再补充一下高峰期测试结果吧</em></p><p>晚上十一点左右进行了第二次测试。</p><ul><li>superbench</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1102.png" alt="早上superbench测试"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1113.png" alt="晚上测试"></p><ul><li><p>Lemonbench</p><p>详细报告可以查看<a href="https://paste.ubuntu.com/p/y9rHtqHwD2/" target="_blank" rel="noopener">https://paste.ubuntu.com/p/y9rHtqHwD2/</a> （早上测试）</p><p><a href="https://paste.ubuntu.com/p/jkKfkD8Y9M/" target="_blank" rel="noopener">https://paste.ubuntu.com/p/jkKfkD8Y9M/</a> （晚上测试）</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1109.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1110.png" alt=""></p><p>可以看到CPU已经使用了3900x，io的话和之前的测试结果比确实高了好几倍(不过不知道过段时间母机负载更高一些之后还能不能有那么优秀的表现)，3900x确实强，在lemonbench的cpu测试里面，分数达到了1894分…之前测得server.it只有600左右，而阿里云学生机以及gcore伯力只有800~900这样，网络速度的话，本地测试的确能跑到1Gbps，到国内的测试光看脚本上的测试结果还是很不错的。路由回程大部分走he，科技网教育网走了cogent。</p></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="iperf3测试"><a href="#iperf3测试" class="headerlink" title="iperf3测试"></a>iperf3测试</h3><h4 id="到洛杉矶的pacificrack测试"><a href="#到洛杉矶的pacificrack测试" class="headerlink" title="到洛杉矶的pacificrack测试"></a>到洛杉矶的pacificrack测试</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1124.png" alt="pr上传到buyvm"></p><p>第一次测试估计是跑太快了，触发限速了…第二次限制100M的速度</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1125.png" alt="上传到pr限速100M"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1128.png" alt="从pr下载限速90M"></p><p>可见在美国国内带宽还是相当充足的，单线程测速就有如此表现，速度其实远大于100M，但是辣鸡pr太容易触发限速了…</p><h4 id="到中国联通"><a href="#到中国联通" class="headerlink" title="到中国联通"></a>到中国联通</h4><p>这里只测了上传速度，北方联通300M</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1134.png" alt="单线程上传至山东联通——早上"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1143.png" alt="4线程到北方联通——早上"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1111.png" alt="单线程上传到中国联通——晚十一点"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1112.png" alt="四线程上传到中国联通——晚十一点"></p><h4 id="到中国电信"><a href="#到中国电信" class="headerlink" title="到中国电信"></a>到中国电信</h4><p>南方电信100M宽带</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1139.png" alt="单线程上传到南方电信——早上"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1142.png" alt="四线程上传到中国电信——早上"></p><p>早上的时候，到电信的速度也还算可以。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1115.png" alt="单线程到电信——晚十一点"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1116.png" alt="四线程到电信——晚11点"></p><p>晚上的速度可以说是彻底用不了啦。</p><h3 id="ping测试"><a href="#ping测试" class="headerlink" title="ping测试"></a>ping测试</h3><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1132.png" alt="早上的ping测试"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1121.png" alt="晚上ping测试"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> vps评测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps测试 </tag>
            
            <tag> 美国vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoAccess将web服务器日志可视化</title>
      <link href="/posts/goaccess.html"/>
      <url>/posts/goaccess.html</url>
      
        <content type="html"><![CDATA[<h1 id="GoAccess-web日志可视化"><a href="#GoAccess-web日志可视化" class="headerlink" title="GoAccess web日志可视化"></a>GoAccess web日志可视化</h1><p>有时候我们希望能分析一下web服务器的访问记录，如果是直接打开<em>/var/log/nginx/access.log</em>的话，虽然的确可以看到访问记录，但是数据太多了，也很难直观的分析出我们想要的结果。而使用命令来分析虽然可行，但是命令比较难记忆，也不算直观。</p><p>今天了解到了一款轻量易部署的工具——<a href="https://goaccess.io/" target="_blank" rel="noopener">goaccess</a>，可以用来将我们nginx服务器的访问日志可视化，将数据直观的展现给我们。<em>除了nginx日志，该工具还可以将apache等服务端的日志可视化展示</em></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="安装GoAccess"><a href="#安装GoAccess" class="headerlink" title="安装GoAccess"></a>安装GoAccess</h2><p>官方给出了<a href="https://goaccess.io/download" target="_blank" rel="noopener">安装教程</a>，有linux包管理器安装，源码编译安装，docker镜像等多种部署方式，由于ubuntu18源里面的goaccess版本还算比较新，可以直接使用<code>sudo apt install goaccess</code>来安装</p><p><strong>强烈建议不想折腾的话直接用包管理器安装！！！体验基本是相同的</strong>。</p><p>不过这篇文章中我计划直接下载源码编译安装最新版，获得最新的体验:</p><p>我计划使用geoip city的mmdb数据库(一开始我以为可以精确到城市，但是查看github issues发现他们其实还没做精确到城市的显示…),所以得先去下载geoip2的数据库 <a href="https://www.maxmind.com/" target="_blank" rel="noopener">https://www.maxmind.com/</a> 需要注册才能下载，还不能挂代理。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 首先安装依赖避免出现下面那些报错</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libncursesw5-dev libglib2.0-dev libgeoip-dev libtokyocabinet-dev libbz2-dev$ <span class="token function">wget</span> https://tar.goaccess.io/goaccess-1.3.tar.gz$ <span class="token function">tar</span> -xzvf goaccess-1.3.tar.gz$ <span class="token function">cd</span> goaccess-1.3/$ ./configure --enable-utf8 --enable-geoip<span class="token operator">=</span>mmdb --enable-tcb<span class="token operator">=</span>btree <span class="token comment" spellcheck="true">#这里的各个配置可以查看教程中的介绍如果要开启ssl 使用 --with-ssl参数</span>$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span></code></pre><p>第一次尝试安装出现报错  </p><p>checking for MMDB_open in -lmaxminddb… no<br>configure: error:<br>Missing development files for libmaxminddb library.*</p><p>说明我们还没有安装 libmaxminddb库。</p><blockquote><p>libmaxminddb库提供一个用于读取MaxMind数据库文件的C 库，包括来自MaxMind的GeoIP2数据库。 这是定制的二进制格式，旨在方便快速查找IP地址，同时允许在与地址相关的数据类型中具有很大的灵活性。</p></blockquote><p>我们先进行该库的安装:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/maxmind/libmaxminddb/releases/download/1.4.2/libmaxminddb-1.4.2.tar.gz<span class="token function">tar</span> -zxvf libmaxminddb-1.4.2.tar.gz<span class="token function">cd</span> libmaxminddb-1.4.2$ ./configure$ <span class="token function">make</span>$ <span class="token function">make</span> check$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span>$ <span class="token function">sudo</span> ldconfig</code></pre><p>尝试configure的时候再次报错 <em>configure: error: **</em> Missing development libraries for ncursesw*，使用<code>sudo apt-get install libncursesw5-dev</code>补上我们缺少的依赖。</p><p>之后还有一个依赖缺少问题 <em>configure: error: *** Missing development libraries for Tokyo Cabinet Database</em></p><p><strong>所以记得在configure之前先安装依赖 sudo apt-get install libncursesw5-dev libglib2.0-dev libgeoip-dev libtokyocabinet-dev</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0635.png" alt="./configure执行成功"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>之后再次执行<code>./configure --enable-utf8 --enable-geoip=mmdb --enable-tcb=btree</code>，执行成功之后再执行<code>make</code> <code>make install</code>来安装,然后使用<code>sudo cp goaccess /usr/bin/</code>将二进制文件移动到/usr/bin目录。之后编辑配置文件 <code>nano /usr/local/etc/goaccess/goaccess.conf</code>修改 geoip-database /usr/local/src/GeoLite2-City.mmdb <em>这里填你下载的数据库路径</em></p><p>  <strong>编译安装还是比较麻烦，再次建议直接使用apt/yum/pacman安装</strong></p><p>更多的安装教程可以查看上面的安装教程链接。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="GoAccess的多种展示方式"><a href="#GoAccess的多种展示方式" class="headerlink" title="GoAccess的多种展示方式"></a>GoAccess的多种展示方式</h2><p>goaccess有多种数据可视化的方式,分别为:</p><ol><li>命令行输出格式化数据</li><li>利用access.log生成静态的可视化数据</li><li>生成实时可视化数据</li></ol><p><strong>注意，如果是编译安装且选择了 –enable-geoip=mmdb的话需要编辑配置文件，并在使用命令的时候带上参数 –config-file=/usr/local/etc/goaccess/goaccess.conf，如果是用包管理器安装的话则不需要</strong></p><h3 id="命令行输出GoAccess"><a href="#命令行输出GoAccess" class="headerlink" title="命令行输出GoAccess"></a>命令行输出GoAccess</h3><p><code>goaccess /var/log/nginx/access.log -c</code>，会先询问你数据的格式，我这里的日志使用的是第一种。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0601.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0602.png" alt="命令行下的可视化数据"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="解析accesslog生成静态html"><a href="#解析accesslog生成静态html" class="headerlink" title="解析accesslog生成静态html"></a>解析accesslog生成静态html</h3><p>GoAccess还可以解析access.log生成静态html，以更加直观的方式来展示数据。</p><p><code>goaccess /var/log/nginx/access.log -o report.html --log-format=COMBINED</code>，之后再使用浏览器访问report.html即可查看报告，各种数据一应俱全。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0605.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0607.png" alt=""></p><h3 id="实时解析访问日志"><a href="#实时解析访问日志" class="headerlink" title="实时解析访问日志"></a>实时解析访问日志</h3><p>GoAccess除了可以生成静态的html文件，还可以生成实时网站访问数据！</p><p><code>goaccess /var/log/nginx/access.log -o /var/www/html/report.html --log-format=COMBINED --real-time-html  --config-file=/usr/local/etc/goaccess/goaccess.conf</code></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0613.png" alt=""></p><h4 id="添加中文支持"><a href="#添加中文支持" class="headerlink" title="添加中文支持"></a>添加中文支持</h4><p>Goaccess 1.3之后的版本提供了多语言支持，先在命令行中执行 <code>apt install language-pack-zh-hans</code> 安装中文包，再使用<code>export LANG=zh_CN.UTF-8</code>修改环境变量，再次使用 <code>goaccess /var/log/nginx/access.log -o /var/www/html/report.html --log-format=COMBINED --real-time-html  --config-file=/usr/local/etc/goaccess/goaccess.conf</code>启动GoAccess可以发现已经是中文界面了。</p><p>关于实时模式，可以查看官网的demo <a href="https://rt.goaccess.io/?20200209201008" target="_blank" rel="noopener">https://rt.goaccess.io/?20200209201008</a> </p><h4 id="异常退出"><a href="#异常退出" class="headerlink" title="异常退出"></a>异常退出</h4><p>如果实时模式没有正常退出，可能无法再次正常启动，GoAccess默认使用7890 websocket端口，所以使用lsof -i:7890查看占用该端口的进程号并kill即可。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h4 id="ssl支持"><a href="#ssl支持" class="headerlink" title="ssl支持"></a>ssl支持</h4><p>如果需要在加密连接上输出实时数据，则需要使用 <code>--ssl-cert=</code> 和 <code>--ssl-key=</code>,我在设置之后访问report.html发现数据依旧是静态的，突然想起我用了cloudflare cdn，而7890端口并不在cloudflare的支持端口列表里面，所以我使用参数 <code>--ws-url=wss://服务器域名(我们的浏览器会尝试与该域名的8443端口见了ws连接):8443 --port=8443</code> 把端口改成了8443。令人没想到的是，此时的report.html使用代理链接的时候是可以连接的，并可以查看实时信息，而直接连接的时候依旧是静态数据，tcping一看。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0951.png" alt=""></p><p>去cloudflare的官网可以发现如下内容</p><blockquote><p>只有端口 80 和 443 可兼容以下服务：</p><ul><li>对于启用了<strong>中国网络</strong>的域名的中国境内数据中心 HTTP/HTTPS 流量，</li></ul></blockquote><p>也就是说，国内是没办法通过cloudflare连接非80/443端口的…</p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><p>但是也不是没有办法连接，最后我想到了反向代理的方案。</p><p>将启动参数改为<code>--ws-url=wss://你的域名.com/goaccess --port=7890</code></p><p>修改nginx站点配置文件 <em>/etc/nginx/site-available/default</em>,添加下面内容</p><pre><code>    location /goaccess {        proxy_redirect off;        proxy_pass https://127.0.0.1:7890;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }</code></pre><p>注意，如果你的站点配置文件里面开启了url重写，为了避免 /goaccess 受到影响，我们需要把该路径排除重写。</p><pre><code># 把重写规则都放到location / 里面去location / {     if (-f $request_filename/index.html){    rewrite (.*) $1/index.html break;    }    if (-f $request_filename/index.php){    rewrite (.*) $1/index.php;    }    if (!-f $request_filename){    rewrite (.*) /index.php;    }} #下面什么都不需要做location /goaccess/ {}</code></pre><p>之后重启nginx，再访问report.html，发现左边齿轮处终于显示connect了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/1030.png" alt=""></p><p>如果你只是自己看或者不在意ip暴露，其实直接使用ip直接连接不走cdn就没那么麻烦了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://goaccess.cc/?mod=man" target="_blank" rel="noopener">https://goaccess.cc/?mod=man</a></p><p><a href="https://goaccess.io/" target="_blank" rel="noopener">https://goaccess.io/</a></p><p><a href="http://www.xiaomlove.com/2019/04/01/simple-parse-nginx-access-log-by-goaccess/" target="_blank" rel="noopener">http://www.xiaomlove.com/2019/04/01/simple-parse-nginx-access-log-by-goaccess/</a></p><p><a href="https://stackoverflow.com/questions/26093270/nginx-how-to-let-rewrite-rules-ignore-files-or-folders" target="_blank" rel="noopener">https://stackoverflow.com/questions/26093270/nginx-how-to-let-rewrite-rules-ignore-files-or-folders</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps测试工具收集</title>
      <link href="/posts/vps-test.html"/>
      <url>/posts/vps-test.html</url>
      
        <content type="html"><![CDATA[<h1 id="vps测试脚本-工具-网站分享"><a href="#vps测试脚本-工具-网站分享" class="headerlink" title="vps测试脚本/工具/网站分享"></a>vps测试脚本/工具/网站分享</h1><blockquote><p>转载自<a href="https://aoyou.me/resources/vps-test.html" target="_blank" rel="noopener">https://aoyou.me/resources/vps-test.html</a><br>当买到的vps开机后，相信不少人对于vps的cpu/硬盘/网络等表现如何肯定是相当的好奇，我这里也搜集一些vps测试脚本/程序方便自己之后的使用，也方便大家的查询。 这里列出的工具并不算多，不过这篇文章也会不断地更新来慢慢丰富。<br>以下脚本都是linux vps使用的</p></blockquote><h2 id="一键测试脚本"><a href="#一键测试脚本" class="headerlink" title="一键测试脚本"></a>一键测试脚本</h2><h3 id="superbench"><a href="#superbench" class="headerlink" title="superbench"></a>superbench</h3><p>我个人比较喜欢使用<a href="https://www.oldking.net/350.html" target="_blank" rel="noopener">superbench</a>来进行测试，因为该脚本能比较直观的看出vps的硬件情况(CPU/磁盘io/磁盘空间/内存)，测速节点也换成了国内的speedtest节点，可以说更“贴近”我们的日常生活，使用命令<br><code>wget -qO- git.io/superbench.sh | bash</code> 即可进行测试。<br><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0426.png#vwid=690&vhei=636" alt="superbench" title="superbench"></p><h3 id="lemonbench"><a href="#lemonbench" class="headerlink" title="lemonbench"></a>lemonbench</h3><p>lemonbench提供比superbench更详细的测试，除了磁盘io和网速测试外，它还提供vps的cpu跑分，内存读写速度，回程路由追踪，流媒体解锁情况等测试，测试完之后还能生成分享链接 <a href="https://paste.ubuntu.com/p/hC3vF5wgjQ/" target="_blank" rel="noopener">例子</a>，可以直接在浏览器上查看或是分享给他人。该脚本有两种模式。<br>使用<code>curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s fast</code>进行快速测试，该模式下测试速度较快，但是结果没那么详细，部分测试的次数较少(如磁盘io测试)，测速节点较少，路由追踪也不会测那么多个节点。使用<code>curl -fsL https://ilemonra.in/LemonBenchIntl | bash -s full</code>进行测试时，会进行更加详细全面的测试，测试次数会更多，使用的节点也更多，当然耗时会更长。<br><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0434.png#vwid=1049&vhei=773" alt="lemonbench"></p><h3 id="bench-sh"><a href="#bench-sh" class="headerlink" title="bench.sh"></a>bench.sh</h3><p><a href="https://teddysun.com/444.html" target="_blank" rel="noopener">bench.sh</a>硬件部分的测试项目和superbench一样的，但是测速节点使用的是国外的节点，只测下载速度。当购买服务器是用来进行科学上网等活动的时候，不要只关注到国内的上传速度，也要注意国际方向的带宽，毕竟你的服务器还得向全球各个地方的服务器请求资源呢。<br><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0441.png#vwid=829&vhei=574" alt=""></p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><h3 id="iperf3"><a href="#iperf3" class="headerlink" title="iperf3"></a>iperf3</h3><p>很多时候speedtest的测试结果并不准确，比如如果很多人都在使用同一个测速节点进行测试，测试节点的带宽就不够了，那么测出来的结果肯定不准，并且你的服务器到测试节点的线路并不一定和到你所在的网络的线路一样(对于科学上网这点尤其重要)，所以使用iperf3进行点对点的测试是更为准确的选择。iperf3的服务器端和客户端都由自己来提供，你可以在你的vps上运行iperf服务端，然后在你自己的电脑上运行客户端来进行测试，反过来也是一样的。以在vps上运行服务端为例。</p><pre><code>apt install iperf3iperf3 -s</code></pre><p>运行这两行命令之后，服务器就会安装iperf3并在5201端口开启iperf3服务。<br>在自己网络的电脑上(linux/windows皆可)运行iperf3客户端进行测试。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># iperf3默认的测试方向是客户端上传数据到服务端的测试，即下面这条命令会测试本地上传到vps(ip改成你vps的ip)的速度，测试时长30s每次间隔1s</span>iperf3 -c ip -t 30 -i 1<span class="token comment" spellcheck="true"># 我们也可以加上一个 -R进行反向测试，即</span>iperf3 -c ip -t 30 -i 1 -R<span class="token comment" spellcheck="true"># 除了这几个参数之外，iperf还有更多的参数可以使用，如-P 4代表四线程，-u代表udp测试等等...这些都可以使用iperf3 -h进行查看</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0453.png#vwid=857&vhei=262" alt="iperf3测试"><br>我想比起speedtest，iperf3的测试结果更为客观一些。</p><h3 id="besttrace"><a href="#besttrace" class="headerlink" title="besttrace"></a>besttrace</h3><p>有时候我们想看vps的回程路由是怎么走的，这时我们可以使用besttrace工具，该工具可以前往ipip.net进行下载。<br><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0454.png#vwid=1423&vhei=451" alt=""></p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> https://cdn.ipip.net/17mon/besttrace4linux.zipunzip besttrace4linux.zip -d best<span class="token function">cd</span> best<span class="token function">chmod</span> +x besttrace<span class="token function">mv</span> besttrace /bin<span class="token comment" spellcheck="true"># 之后即可使用besttrace -g cn ip 来进行测试</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0457.png#vwid=1262&vhei=555" alt="besttrace"><br><strong>另外，建议测试的时候加上参数-T测试一下TCP的路由，因为某些商家的icmp和tcp路由是不一样的，所以有时候ping值看起来很好看，但是实际体验起来可能很糟糕。</strong></p><h2 id="测试网站"><a href="#测试网站" class="headerlink" title="测试网站"></a>测试网站</h2><p>有一些网站也可以为我们提供测试工具。</p><h3 id="ipip-net"><a href="#ipip-net" class="headerlink" title="ipip.net"></a>ipip.net</h3><p>比较推荐<a href="https://www.ipip.net/" target="_blank" rel="noopener">ipip.net</a>，该网站提供了很多测试的小工具如<strong>去程路由追踪</strong>,dns解析测试，ping测试，asn查询等等…去程路由测试是我用的比较多的。</p><h3 id="ping-pe"><a href="#ping-pe" class="headerlink" title="ping.pe"></a>ping.pe</h3><p><a href="http://ping.pe/" target="_blank" rel="noopener">ping.pe</a>提供了全球各个地方的测试服务器，对我们提供的ip进行ping测试，并用直观的图表表示出来，网络延迟丢包情况一目了然。<br><img src="https://cdn.jsdelivr.net/gh/haojie06/imgStorage/imgs/2020/04/0503.png#vwid=1076&vhei=839" alt="ping.pe"></p>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自家电脑(Ubuntu18)使用kvm虚拟化自建vps</title>
      <link href="/posts/home-kvm-vps.html"/>
      <url>/posts/home-kvm-vps.html</url>
      
        <content type="html"><![CDATA[<h1 id="自家电脑使用kvm虚拟化开vps"><a href="#自家电脑使用kvm虚拟化开vps" class="headerlink" title="自家电脑使用kvm虚拟化开vps"></a>自家电脑使用kvm虚拟化开vps</h1><blockquote><p>转载请注明出处</p></blockquote><p>家里有一台ubuntu18的迷你主机作为服务器长期运行，由于之前装了24G的内存以及之前的业务长期只占用一个核心且消耗不了几GB的内存，大量的资源都长时间闲置，造成了一定的浪费，并且某些服务需要用到Windows server，我想着与其再去购入一台能流畅运行windows server的vps，不如充分利用资源，使用该迷你主机虚拟化一个windows server的vps出来使用。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h2><h3 id="常见虚拟化技术"><a href="#常见虚拟化技术" class="headerlink" title="常见虚拟化技术"></a>常见虚拟化技术</h3><blockquote><ul><li><p>Xen：</p><p>它是基于硬件的完全分割，物理上有多少的资源就只能分配多少资源，因此很难超售。Xen是不能超售内存和硬盘的，当母服务器只有16G内存以及100G硬盘时，当开Xen架构（任意一个虚拟化）的1G内存、25G硬盘的子机时，会直接占用服务器1G内存，以及25G硬盘，所以Xen的性能，相比OpenVZ在超售的情况下要好。</p></li><li><p>OpenVZ：</p><p>用SWsoft的Virutozzo虚拟化服务器软件产品的内核，是基于Linux平台的操作系统级服务器虚拟化架构。当然 OpenVZ可以超售，意思味着一台服务器总共16G内存，他可以开出配置为1G内存×17台以上的子服务器。因为他的虚拟架构关系属于：客户用多少，就扣除母服务器多少。另一个特点是，它是直接调用母服务器的内核，所以会导致部分软件无法使用，以及部分内核文件是无法修改。</p></li><li><p>KVM:</p><p>KVM是全功能虚拟化架构，甚至拥有独立的BIOS控制，所以对母服务器性能影响较大，所以基于KVM的VPS较贵，但KVM VPS相对其它架构的VPS较为自由。性能比Xen略低。</p></li><li><p>Hyper-V ：</p><p>微软的一款虚拟化产品，大部分国内的VPS服务商使用这个架构，主要是因为其转为Windows定制，管理起来较为方便。目前的Hyper-V也支持Linux，只不过性能损失比较严重。</p></li><li><p>VMWare</p><p>是全球桌面到数据中心虚拟化解决方案的领导厂商开发的一款全功能完全虚拟化的软件。这个大家应该最熟悉。Windows上装VMWare跑linux 的很多。不过因为授权很贵，普通VPS很少用这个的。和OpenVZ架构一样，子机用多少内存，就扣除系统多少内存，所以也存在超售可能。</p></li></ul><p>目前VPS提供商主要是OpenVZ，因为便宜。KVM相对贵一些，提供Xen的并不是很多。</p></blockquote><h3 id="QEMU和KVM的关系"><a href="#QEMU和KVM的关系" class="headerlink" title="QEMU和KVM的关系"></a>QEMU和KVM的关系</h3><p>我们用的是kvm来进行虚拟化，但是我们又经常能看见qemu的身影，那么它们之间到底是什么关系呢？</p><p>转载自: <a href="https://zhuanlan.zhihu.com/p/48664113" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/48664113</a></p><blockquote><p>首先KVM（Kernel Virtual Machine）是Linux的一个内核驱动模块，它能够让Linux主机成为一个Hypervisor（虚拟机监控器）。在支持VMX（Virtual Machine Extension）功能的x86处理器中，Linux在原有的用户模式和内核模式中新增加了客户模式，并且客户模式也拥有自己的内核模式和用户模式，虚拟机就是运行在客户模式中。KVM模块的职责就是打开并初始化VMX功能，提供相应的接口以支持虚拟机的运行。</p><p>QEMU（quick emulator)本身并不包含或依赖KVM模块，而是一套由Fabrice Bellard编写的模拟计算机的自由软件。QEMU虚拟机是一个纯软件的实现，可以在没有KVM模块的情况下独立运行，但是性能比较低。QEMU有整套的虚拟机实现，包括处理器虚拟化、内存虚拟化以及I/O设备的虚拟化。QEMU是一个用户空间的进程，需要通过特定的接口才能调用到KVM模块提供的功能。从QEMU角度来看，虚拟机运行期间，QEMU通过KVM模块提供的系统调用接口进行内核设置，由KVM模块负责将虚拟机置于处理器的特殊模式运行。QEMU使用了KVM模块的虚拟化功能，为自己的虚拟机提供硬件虚拟化加速以提高虚拟机的性能。</p><p>KVM只模拟CPU和内存，因此一个客户机操作系统可以在宿主机上跑起来，但是你看不到它，无法和它沟通。于是，有人修改了QEMU代码，把他模拟CPU、内存的代码换成KVM，而网卡、显示器等留着，因此QEMU+KVM就成了一个完整的虚拟化平台。</p><p>KVM只是内核模块，用户并没法直接跟内核模块交互，需要借助用户空间的管理工具，而这个工具就是QEMU。KVM和QEMU相辅相成，QEMU通过KVM达到了硬件虚拟化的速度，而KVM则通过QEMU来模拟设备。对于KVM来说，其匹配的用户空间工具并不仅仅只有QEMU，还有其他的，比如RedHat开发的libvirt、virsh、virt-manager等，QEMU并不是KVM的唯一选择。</p><p>所以简单直接的理解就是：QEMU是个计算机模拟器，而KVM为计算机的模拟提供加速功能。</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="部署vps"><a href="#部署vps" class="headerlink" title="部署vps"></a>部署vps</h2><h3 id="检查是否支持虚拟化"><a href="#检查是否支持虚拟化" class="headerlink" title="检查是否支持虚拟化"></a>检查是否支持虚拟化</h3><p>我们首先要检查我们的系统/硬件是否支持硬件虚拟化。<code>egrep -c &#39;(vmx|svm)&#39; /proc/cpuinfo</code>,查看结果，只要不是0都可以(如果在虚拟机上运行该命令，输出的就是0)。如果你的CPU支持虚拟化，但是这里输出的还是0，可以重启电脑进入BIOS尝试开启VT之后再次尝试。</p><p>安装cpu-checker软件查看我们的电脑是否支持kvm虚拟化。<code>sudo apt install cpu-checker</code>,然后执行<code>sudo kvm-ok</code>,如果输出如下就代表可以使用kvm来进行加速了。</p><pre><code>INFO: /dev/kvm existsKVM acceleration can be used</code></pre><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token comment" spellcheck="true"># Ubuntu 18.04</span><span class="token function">sudo</span> apt <span class="token function">install</span> qemu qemu-kvm libvirt-bin  bridge-utils  virt-manager<span class="token comment" spellcheck="true"># Ubuntu 20.04</span><span class="token function">sudo</span> apt <span class="token function">install</span> qemu qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virt-manager</code></pre><h3 id="开启libvirt服务"><a href="#开启libvirt服务" class="headerlink" title="开启libvirt服务"></a>开启libvirt服务</h3><p>libvirt为我们提供了操作虚拟机的接口，我们需要先开启该项服务。</p><pre><code>sudo service libvirtd startsudo update-rc.d libvirtd enableservice libvirtd status</code></pre><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0709.png" alt=""></p><h3 id="网桥配置"><a href="#网桥配置" class="headerlink" title="网桥配置"></a>网桥配置</h3><p>参考 <a href="https://notesail.com/posts/kvm-bridge.html" target="_blank" rel="noopener">https://notesail.com/posts/kvm-bridge.html</a> ，假设宿主机之前的eno1网卡上的ip为192.168.0.100，那么我们新建一个网桥并为其分配该ip。</p><pre><code># ubuntu18使用netplan管理网络设备,我们编辑配置文件(配置文件的名字并不一定相同，但是类似)sudo nano /etc/netplan/01-network-manager-all.yaml#修改成下面的内容network:  ethernets:        eno1:            dhcp4: no  bridges:      br0:        interfaces: [eno1]        dhcp4: no        addresses: [192.168.0.100/24]        gateway4: 192.168.0.1        parameters:          stp: true          forward-delay: 4        nameservers:          addresses: [192.168.0.1]  version: 2</code></pre><p>最后使用<code>sudo netplan apply</code>使其生效，ssh连接可能会断开，建议直接在机器上操作，之后使用<code>ifconfig</code>，可以看到我们已经多了一个名为br0的设备，并使用了之前eno1网卡分配的ip，到这我们已经在系统层面添加了网桥了。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="创建vps"><a href="#创建vps" class="headerlink" title="创建vps"></a>创建vps</h3><p>创建vps首先需要系统镜像，iso,vhd,img之类的格式都是可以的。我直接使用了<a href="https://teddysun.com/545.html" target="_blank" rel="noopener">秋水逸冰制作的windows server镜像</a>(当然你直接去msdn下载也是可以的)。.gz文件用gunzip解压即可，gunzip解压没有进度显示，所以需要等上一段时间。</p><p>下载镜像后开始创建虚拟机，该操作可以在纯命令行环境中使用virsh进行，也可以在图形环境下使用virt-manager进行，由于图形界面下还是比较方便操作，所以我直接vnc到服务器上进行操作。<em>更建议直接服务器接显示器进行操作</em>。</p><h4 id="virt-manager图形化创建虚拟机"><a href="#virt-manager图形化创建虚拟机" class="headerlink" title="virt-manager图形化创建虚拟机"></a>virt-manager图形化创建虚拟机</h4><p>linux服务器上使用<code>vncserver -geometry 1920x1080</code>开启vnc服务，一般端口为5901,vnc到服务器上后打开一个终端，执行<code>virt-manager</code>命令打开virt-manager。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0729.png" alt=""></p><p>点击第一个按钮开始创建一个虚拟机，注意使用vhd/img格式的系统镜像的话要选择第四个方式，不然会无法开机。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0731.png" alt=""></p><p>选择系统镜像(vhd格式没办法直接在这选，要选择到文件管理器里浏览本地文件选择)，并设置好分配的硬盘,cpu和内存资源之后来到了最后一步，网络设置，我们在这里填写之前创建的网桥名字br0。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0820.png" alt=""></p><p>完成这一步之后就可以启动虚拟机了，我们如果是使用vnc来控制virtmanager的话可能会感觉很难控制虚拟机的图形界面，所以我们需要前往该虚拟机的设置界面将Display Spice的Type改为VNC server，并重启虚拟机即可。另外还建议吧NIC修改为e1000，使虚拟机使用虚拟的千兆网卡(默认百兆)。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0822.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0835.png" alt="修改为千兆网卡"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0825.png" alt="成功启动"></p><p>另外通过VNC使用virt-manager访问虚拟机图形界面的时候，大概率会遇到鼠标错位的问题，这是正常现象。如果该界面没有显示无法连接到网络的提示，那么建议你直接前往路由器管理界面查看新设备(虚拟机)分配到的ip(虽然网桥使用的是192.168.0.100的ip,虚拟机也使用了该网桥，但是虚拟机的ip是另外分配的!)，并直接使用windows的远程桌面来进行控制。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0832.png" alt="路由器管理界面可知该虚拟机使用了192.168.0.110的ip"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0833.png" alt="成功连接"></p><p>之后只需要设置好路由器的端口转发之类的，自建vps就大功告成了！</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h4 id="virt-install命令行创建虚拟机"><a href="#virt-install命令行创建虚拟机" class="headerlink" title="virt-install命令行创建虚拟机"></a>virt-install命令行创建虚拟机</h4><p>如果你的Linux服务器没有装图形界面，或者是vnc异常又没办法直接接显示器操作，那么也可以直接使用纯命令行的方式来创建虚拟机。</p><p>命令行中创建一个脚本文件start.sh，写入如下内容,并执行bash start.sh，注意，我是用的vhd镜像所以这样写，如果你是用的是iso文件进行安装，那么要做出相应的改变，更多参数请查看wiki或者直接<code>man virt-install</code>。</p><pre><code>virt-install \   --name=virwin \   --os-type=windows \   --bridge=br0 \   --import --disk=/mnt/sda/kvm/cn_windows2019 \   --graphics spice --ram=4096 --vcpus=4 </code></pre><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020042020/04/0853.png" alt="正常安装(由于我拒绝了X11转发所以有警告，你也可以使用x11转发来查看图形界面)"></p><p>前往路由器管理界面查看分配的ip即可连接。<em>理论上直接使用virsh也可以查看分配的ip，但是我这不是所有的方法都生效了，不知道为什么 <a href="https://adam.younglogic.com/2017/10/vm-ip-virsh/" target="_blank" rel="noopener">https://adam.younglogic.com/2017/10/vm-ip-virsh/</a></em>。</p><p>在我这，下面这种查看ip的方法生效了。</p><pre><code>virsh domiflist virwin#获得了虚拟机的虚拟网卡MACInterface  Type       Source     Model       MAC-------------------------------------------------------vnet1      bridge     br0        rtl8139     52:54:00:6e:3a:ff#使用arp -e |grep 52:54:00:6e:3a:ff 来查找该mac对应的ip192.168.0.111            ether   52:54:00:6e:3a:ff   C                     br0</code></pre><p>之后也可以在命令行中使用virsh相关命令对vps进行管理。</p><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>virsh list –all</td><td>查看虚拟机和状态</td></tr><tr><td>virsh start  test</td><td>启动该虚拟机</td></tr><tr><td>virsh reboot test</td><td>重启虚拟机</td></tr><tr><td>virsh  suspend test</td><td>虚拟机处于paused暂停状态,一般情况下是被admin运行了virsh suspend才会处于这种状态,但是仍然消耗资源,只不过不被超级管理程序调度而已。</td></tr><tr><td>virsh resume test</td><td>把虚拟机唤醒，使其恢复到running状态</td></tr><tr><td>virsh shutdown test</td><td>关闭指令，是虚拟机进入shutoff状态，系统提示虚拟机正在被关闭，却未必能成功</td></tr><tr><td>virsh destroy test</td><td>强制关闭该虚拟机，但并非真的销毁该虚拟机，只是关闭而已。</td></tr><tr><td>virsh save test a</td><td>将该虚拟机的运行状态存储到文件a中</td></tr><tr><td>virsh restore a</td><td>根据文件a恢复被存储状态的虚拟机的状态，即便虚拟机被删除也可以恢复（如果虚拟机已经被undefine移除，那么恢复的虚拟机也只是一个临时的状态，关闭后自动消失）</td></tr><tr><td>virsh undefine test</td><td>移除虚拟机，虚拟机处于关闭状态后还可以启动，但是被该指令删除后不能启动。在虚拟机处于Running状态时，调用该指令，该指令暂时不生效，但是当虚拟机被关闭后，该指令生效移除该虚拟机，也可以在该指令生效之前调用define+TestKVM.xml取消该指令</td></tr><tr><td>virsh edit test</td><td>修改TestKVM的配置文件，效果等于先dumpxml得到配置文件，然后vi xml，最后后define该xml文件(建议关机修改，修改完virsh define防止不生效)</td></tr><tr><td>virt-clone -o test -n test01 –file  /data/test01.img</td><td>在-o后面为被克隆虚拟机名称，-n后克隆所得虚拟机名称，file为克隆所得虚拟机镜像存放地址。 克隆的好处在于，假如一个虚拟机上安装了操作系统和一些软件，那么从他克隆所得的虚拟机也有一样的系统和软件，大大节约了时间。</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/48664113" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/48664113</a></li><li><a href="https://www.ccarea.cn/archives/54" target="_blank" rel="noopener">https://www.ccarea.cn/archives/54</a></li><li><a href="https://fabianlee.org/2019/04/01/kvm-creating-a-bridged-network-with-netplan-on-ubuntu-bionic/" target="_blank" rel="noopener">https://fabianlee.org/2019/04/01/kvm-creating-a-bridged-network-with-netplan-on-ubuntu-bionic/</a></li><li><a href="https://www.linuxtechi.com/install-configure-kvm-ubuntu-18-04-server/" target="_blank" rel="noopener">https://www.linuxtechi.com/install-configure-kvm-ubuntu-18-04-server/</a></li></ul><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> vps </tag>
            
            <tag> 玩机 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ruvds三元毛子机测试</title>
      <link href="/posts/ruvds-30rub.html"/>
      <url>/posts/ruvds-30rub.html</url>
      
        <content type="html"><![CDATA[<h1 id="ruvds的”三元毛子机”"><a href="#ruvds的”三元毛子机”" class="headerlink" title="ruvds的”三元毛子机”"></a>ruvds的”三元毛子机”</h1><p>要说到”低价vps”就不得不说一说著名的ruvds”三元毛子机”，该名字来源于俄罗斯的主机商<a href="https://ruvds.com/" target="_blank" rel="noopener">ruvds</a>销售的30卢布月付(按照目前汇率还不到三块钱人民币了)vps。那么便宜的机器真的能用吗?其实三毛机有着数不胜数的缺点，但是就因为它足够便宜，并且速度对于联通来说也还算快，100M共享带宽流量无限，且长期缺货等原因，价格那是越炒越高…去年下半年我就曾经溢价十几块钱收过一个来玩，但是由于其性能实在是太糟糕(特别是磁盘io)，又转给了别人，到了今年年初的时候溢价竟然到了40~50的程度，令人不得不感慨一些人”炒鸡”的疯狂。不过在这帮人炒鸡炒的越来越离谱的时候，前几天官方突然大量补货了(目前已经无法购买)，因为现在我有一台联通的中转机器，所以又打算买来当玩具玩一玩，付款之后等待了两天的时间，终于成功开机。</p><blockquote><p>简要评论一下</p><ol><li>io极其的慢，著名的2.4MB/s</li><li>我开到的是194.87段的ip，可以观看Netflix，可以使用Telegram</li><li>没事不要重装系统，我第一次重装系统一分钟就好了，第二次卡了很久，半个多小时后才装上</li><li>装软件请耐心、耐心、耐心，如果耗时较长请在screen/tmux中进行安装</li><li>目前联通速度还可以，但是不要抱有过高的期待，写这篇评测的时候还有很多人的机器没有开机，等到开机折腾的人多了100M共享带宽是真的不够玩的</li><li>一个月付2.7人民币的机器当玩具就好了~</li></ol><p><strong>虽然很便宜，联通也用着还行，但是我认为这台机器不值得溢价购买，就算溢价也是10~20元的合理溢价即可，不要助长炒鸡的风气哦！</strong></p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>由于io磁盘io速度实在是太慢，所以我修改了测试脚本，不再进行1GB文件的读写测试了。测试时间为下午四点左右。主要使用了Lemonbench测试脚本。<br><em>补充了周五晚上十一点高峰期的ping测试以及iperf3测试。</em></p><p><a href="https://paste.ubuntu.com/p/yddWv7wpds/" target="_blank" rel="noopener">https://paste.ubuntu.com/p/yddWv7wpds/</a></p><h3 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h3><pre><code>-&gt; System Information OS Release:        Ubuntu 18.04.4 LTS (Bionic Beaver)  (x86_64) CPU Model:        Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz 2.10GHz CPU Cache Size:    22528 KB CPU Number:        1 vCPU Virt Type:        Microsoft Hyper-V Memory Usage:        218.57 MB / 405.63 MB Swap Usage:        [ No Swapfile / Swap partition ] Disk Usage:        2.48 GB / 20.51 GB Boot Device:        /dev/sda1 Load (1/5/15min):    0.11 0.22 0.27  CPU Usage:        9.3% used, 17.5% iowait, 0.0% steal Kernel Version:    4.15.0-91-generic Network CC Method:    bbr + fq -&gt; Network Information IPV4 - IP Address:    [RU] 194.87.146.* IPV4 - ASN Info:    AS48347 (JSC Mediasoft ekspert) IPV4 - Region:        Russia Moscow Moscow -&gt; Media Unlock Test HBO Now:                No Bahamut Anime:                No Abema.TV:                No Princess Connect Re:Dive Japan:    Yes BBC:                    No Bilibili China Mainland Only:        No Bilibili Hongkong/Macau/Taiwan:    No Bilibili Taiwan Only:            No -&gt; CPU Performance Test (Standard Mode, 3-Pass @ 30sec) 1 Thread Test:            843 Scores -&gt; Memory Performance Test (Standard Mode, 3-Pass @ 30sec) 1 Thread - Read Test :        16506.54 MB/s 1 Thread - Write Test:        10539.39 MB/s -&gt; Disk Speed Test (4K Block/1M Block, Direct-Write) Test Name        Write Speed                Read Speed 10MB-4K Block        884 kB/s (215 IOPS, 11.87 s)        646 kB/s (157 IOPS, 16.23 s) 10MB-1M Block        1.8 MB/s (1 IOPS, 5.87 s)        1.8 MB/s (1 IOPS, 5.68 s) 100MB-4K Block        1.1 MB/s (272 IOPS, 93.93 s)        1.1 MB/s (273 IOPS, 93.74 s) 100MB-1M Block        2.3 MB/s (2 IOPS, 46.10 s)        2.2 MB/s (2 IOPS, 48.11 s)</code></pre><p>cpu要比想象中的强一些，可以说还比较不错，但是硬盘读写速度惨不忍睹…这直接限制了该vps只能用做一些不那么依赖磁盘读写的服务，如端口转发，网络代理等…</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="网络部分"><a href="#网络部分" class="headerlink" title="网络部分"></a>网络部分</h3><h4 id="测速"><a href="#测速" class="headerlink" title="测速"></a>测速</h4><h5 id="speedtest"><a href="#speedtest" class="headerlink" title="speedtest"></a>speedtest</h5><pre><code>-&gt; Speedtest.net Network Speed Test Node Name            Upload Speed    Download Speed    Ping Latency Speedtest Default        10.90 MB/s    41.98 MB/s    1.76 ms China, Jilin CU        10.48 MB/s    6.39 MB/s    171.34 ms China, Shandong CU        1.58 MB/s    50.40 MB/s    306.71 ms China, Nanjing CU        9.27 MB/s    3.91 MB/s    124.54 ms China, Shanghai CU        10.67 MB/s    27.01 MB/s    131.97 ms China, Lanzhou CU        10.08 MB/s    27.50 MB/s    143.91 ms China, Beijing CT        2.23 MB/s    17.94 MB/s    223.75 ms China, Hangzhou CT        0.46 MB/s    0.66 MB/s    214.40 ms China, Nanjing CT        2.13 MB/s    16.42 MB/s    312.51 ms China, Guangzhou CT        0.13 MB/s    4.76 MB/s    248.41 ms China, Wuhan CT        Fail: Unknown Error China, Shenyang CM        2.38 MB/s    5.66 MB/s    314.42 ms China, Hangzhou CM        0.86 MB/s    32.99 MB/s    356.11 ms China, Nanning CM        6.20 MB/s    34.72 MB/s    383.00 ms China, Lanzhou CM        10.33 MB/s    12.55 MB/s    377.92 ms Hong Kong, HGC        10.43 MB/s    24.05 MB/s    206.25 ms Hong Kong, CSL        10.03 MB/s    38.01 MB/s    372.70 ms Hong Kong, PCCW        10.83 MB/s    12.90 MB/s    286.64 ms Korea, SK [Kdatacenter]        7.92 MB/s    4.47 MB/s    311.60 ms Japan, NTT [fdcservers]        Fail: Unknown Error Japan, NTT [i3d]        11.46 MB/s    21.66 MB/s    132.15 ms Japan GLBB        10.06 MB/s    1.59 MB/s    257.77 ms Japan Rakuten        10.65 MB/s    27.35 MB/s    263.25 ms Taiwan, Seednet        10.72 MB/s    2.45 MB/s    223.83 ms Taiwan, HiNet        7.08 MB/s    1.82 MB/s    259.53 ms Taiwan, TFN        10.17 MB/s    20.62 MB/s    360.45 ms Singapore, Singtel        10.85 MB/s    18.77 MB/s    203.91 ms Singapore, M1        10.62 MB/s    4.79 MB/s    200.71 ms Singapore, NME        10.63 MB/s    2.32 MB/s    286.49 ms United States, Century Link        10.06 MB/s    7.25 MB/s    195.72 ms United States, Verizon        Fail: Unknown Error</code></pre><p>看这个结果，效果还是相当不错，大陆方向，中国联通除了山东节点速度和延迟都异常(大概绕路了)外速度都接近跑满，电信和移动就不行了，可以说是基本没什么速度。国际方向，大部分地区都能跑满上传和下载，延迟也挺不错。</p><h5 id="iperf3"><a href="#iperf3" class="headerlink" title="iperf3"></a>iperf3</h5><ol><li>到北方联通服务器测速</li></ol><p><em>晚上的速度远比我想象得要糟糕，看来便宜的机器也就这样了。</em><br><em>再次补充，第一次测试两天后再次在晚高峰使用河北联通测速，发现速度居然比之前的测试快多了，单线程能达到60M到70M了，还是有点惊喜的。</em></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0438.png" alt="下午单线程测试"></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0440.png" alt="下午四线程测速"></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1111.png" alt="十一点晚高峰单线程测试"></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1112.png" alt="十一点晚高峰四线程测试"></p><p>   <em>上面使用的是山东的商宽联通测试，因为绕路了，所以下面使用北京家宽测试(直连)</em></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1118.png" alt="北京家宽晚高峰单线程"></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1119.png" alt="北京家宽晚高峰4线程"></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0852.png" alt="过了几天后河北联通晚高峰单线程"><br>2. 到南方电信</p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0441.png" alt="下午单线程测速 好惨..."></p><p>   <img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0442.png" alt="下午4线程测试 多线程提升很大，但是毕竟很多场景不适用"></p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>ping值依旧是大陆方向丢包严重，到欧美的延迟都比较低且稳定，也不怎么丢包，晚高峰差不多大陆全网丢包率都到了30%以上，挺惨的。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0443.png" alt="下午ping测试"><br><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1105.png" alt="晚上十一点ping测试"></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由测试去程三网各测试一个节点，回程路由三网也只展示一个节点，更多的回程路由测试结果请查看lemonbench的结果。</p><h5 id="去程"><a href="#去程" class="headerlink" title="去程"></a>去程</h5><p>去程电信先到西欧再到莫斯科，延迟不低；联通直连，特别是北方联通，延迟比较低；移动去程绕美..延迟超高。</p><ol><li><p>天津电信去程</p><table><thead><tr><th>11</th><th><a href="https://whois.ipip.net/cidr/42.81.129.9/32" target="_blank" rel="noopener">42.81.129.9</a></th><th>42.81.129.9</th><th>天津 chinatelecom.com.cn 电信</th><th><a href="https://whois.ipip.net/AS58542" target="_blank" rel="noopener">AS58542</a> / <a href="https://whois.ipip.net/AS17638" target="_blank" rel="noopener">AS17638</a></th><th>3.5 / 3.4 / 3.3</th></tr></thead><tbody><tr><td>12</td><td><a href="https://whois.ipip.net/cidr/42.81.32.33/32" target="_blank" rel="noopener">42.81.32.33</a></td><td>42.81.32.33</td><td>天津 chinatelecom.com.cn 电信</td><td><a href="https://whois.ipip.net/AS58542" target="_blank" rel="noopener">AS58542</a> / <a href="https://whois.ipip.net/AS17638" target="_blank" rel="noopener">AS17638</a></td><td>3.4 / 3.1 / 3.3</td></tr><tr><td>13</td><td><a href="https://whois.ipip.net/cidr/202.97.79.197/32" target="_blank" rel="noopener">202.97.79.197</a></td><td>202.97.79.197</td><td>北京 chinatelecom.com.cn 电信</td><td></td><td>5.9 / 6 / 5.9</td></tr><tr><td>14</td><td><a href="https://whois.ipip.net/cidr/202.97.94.234/32" target="_blank" rel="noopener">202.97.94.234</a> <a href="https://whois.ipip.net/cidr/202.97.94.234/32" target="_blank" rel="noopener">202.97.94.234</a> *</td><td>202.97.94.234 202.97.94.234 *</td><td>北京 chinatelecom.com.cn 电信 北京 chinatelecom.com.cn 电信 N/A</td><td><a href="https://whois.ipip.net/AS4134" target="_blank" rel="noopener">AS4134</a> <a href="https://whois.ipip.net/AS4134" target="_blank" rel="noopener">AS4134</a> *</td><td>22.1 19.8 *</td></tr><tr><td>15</td><td><a href="https://whois.ipip.net/cidr/202.97.85.46/32" target="_blank" rel="noopener">202.97.85.46</a></td><td>202.97.85.46</td><td>北京 chinatelecom.com.cn 电信</td><td><a href="https://whois.ipip.net/AS4134" target="_blank" rel="noopener">AS4134</a></td><td>20.9 / 22.7 / 20.3</td></tr><tr><td>16</td><td><a href="https://whois.ipip.net/cidr/202.97.39.238/32" target="_blank" rel="noopener">202.97.39.238</a> * <a href="https://whois.ipip.net/cidr/202.97.39.238/32" target="_blank" rel="noopener">202.97.39.238</a></td><td>202.97.39.238 * 202.97.39.238</td><td>荷兰北荷兰省阿姆斯特丹 chinatelecom.com.cn 电信 N/A 荷兰北荷兰省阿姆斯特丹 chinatelecom.com.cn 电信</td><td><a href="https://whois.ipip.net/AS4134" target="_blank" rel="noopener">AS4134</a> * <a href="https://whois.ipip.net/AS4134" target="_blank" rel="noopener">AS4134</a></td><td>166.3 * 165.9</td></tr><tr><td>17</td><td><a href="https://whois.ipip.net/cidr/118.85.205.250/32" target="_blank" rel="noopener">118.85.205.250</a></td><td>118.85.205.250</td><td>荷兰北荷兰省阿姆斯特丹 chinatelecom.com.cn 电信</td><td><a href="https://whois.ipip.net/AS4134" target="_blank" rel="noopener">AS4134</a></td><td>164.6 / 165 / 183.5</td></tr><tr><td>18</td><td><a href="https://whois.ipip.net/cidr/87.245.233.246/32" target="_blank" rel="noopener">87.245.233.246</a></td><td>87.245.233.246</td><td>俄罗斯莫斯科 retn.net</td><td><a href="https://whois.ipip.net/AS9002" target="_blank" rel="noopener">AS9002</a></td><td>220.2 / 224.6 / 220.2</td></tr><tr><td>19</td><td><a href="https://whois.ipip.net/cidr/185.148.36.101/32" target="_blank" rel="noopener">185.148.36.101</a> * <a href="https://whois.ipip.net/cidr/185.148.36.101/32" target="_blank" rel="noopener">185.148.36.101</a></td><td>185.148.36.101 * 185.148.36.101</td><td>俄罗斯莫斯科 mtw.ru N/A 俄罗斯莫斯科 mtw.ru</td><td><a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a> * <a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a></td><td>225.2 * 212.9</td></tr><tr><td>20</td><td>* <a href="https://whois.ipip.net/cidr/194.87.146.180/32" target="_blank" rel="noopener">194.87.146.180</a> <a href="https://whois.ipip.net/cidr/194.87.146.180/32" target="_blank" rel="noopener">194.87.146.180</a></td><td>* 194.87.146.180 194.87.146.180</td><td>N/A 俄罗斯莫斯科 relcom.ru 俄罗斯莫斯科 relcom.ru</td><td>* <a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a> <a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a></td><td>* 216.9 215.2</td></tr></tbody></table></li><li><p>天津联通去程</p><table><thead><tr><th align="center">跳数</th><th align="center">IP</th><th align="center">主机名</th><th align="center">地区（仅供参考）</th><th align="center">AS号（仅供参考）</th><th align="center">时间（毫秒）</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><a href="https://whois.ipip.net/cidr/103.24.228.1/32" target="_blank" rel="noopener">103.24.228.1</a></td><td align="center">103.24.228.1</td><td align="center">天津 cnkuai.cn 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">1.2 / 0.9 / 0.8</td></tr><tr><td align="center">2</td><td align="center"><a href="https://whois.ipip.net/cidr/61.136.63.93/32" target="_blank" rel="noopener">61.136.63.93</a></td><td align="center">61.136.63.93</td><td align="center">天津 chinaunicom.com 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">7.2 / 2.9 / 2.4</td></tr><tr><td align="center">3</td><td align="center"><a href="https://whois.ipip.net/cidr/117.8.227.53/32" target="_blank" rel="noopener">117.8.227.53</a></td><td align="center">dns53.online.tj.cn</td><td align="center">天津 chinaunicom.com 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">1.3 / 1 / 1.2</td></tr><tr><td align="center">4</td><td align="center"><a href="https://whois.ipip.net/cidr/117.8.222.181/32" target="_blank" rel="noopener">117.8.222.181</a></td><td align="center">dns181.online.tj.cn</td><td align="center">天津 chinaunicom.com 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">19.3 / 19.2 / 19.8</td></tr><tr><td align="center">5</td><td align="center"><a href="https://whois.ipip.net/cidr/219.158.18.165/32" target="_blank" rel="noopener">219.158.18.165</a></td><td align="center">219.158.18.165</td><td align="center">北京 chinaunicom.com 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">3.2 / 3.3 / 3.7</td></tr><tr><td align="center">6</td><td align="center">* <a href="https://whois.ipip.net/cidr/219.158.5.150/32" target="_blank" rel="noopener">219.158.5.150</a> <a href="https://whois.ipip.net/cidr/219.158.5.150/32" target="_blank" rel="noopener">219.158.5.150</a></td><td align="center">* 219.158.5.150 219.158.5.150</td><td align="center">N/A 北京 chinaunicom.com 联通 北京 chinaunicom.com 联通</td><td align="center">* <a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a> <a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">* 72.2 28.8</td></tr><tr><td align="center">7</td><td align="center"><a href="https://whois.ipip.net/cidr/219.158.16.66/32" target="_blank" rel="noopener">219.158.16.66</a></td><td align="center">219.158.16.66</td><td align="center">北京 chinaunicom.com 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">14 / 5.3 / 36.6</td></tr><tr><td align="center">8</td><td align="center"><a href="https://whois.ipip.net/cidr/219.158.42.30/32" target="_blank" rel="noopener">219.158.42.30</a></td><td align="center">219.158.42.30</td><td align="center">俄罗斯哈巴罗夫斯克边疆区伯力 chinaunicom.com 联通</td><td align="center"><a href="https://whois.ipip.net/AS4837" target="_blank" rel="noopener">AS4837</a></td><td align="center">41 / 67.4 / 64.2</td></tr><tr><td align="center">9</td><td align="center"><a href="https://whois.ipip.net/cidr/188.43.26.198/32" target="_blank" rel="noopener">188.43.26.198</a></td><td align="center">cta06rb.transtelecom.net</td><td align="center">俄罗斯外贝加尔边疆区赤塔 ttk.ru</td><td align="center"><a href="https://whois.ipip.net/AS20485" target="_blank" rel="noopener">AS20485</a></td><td align="center">63.6 / 64.6 / 89.1</td></tr><tr><td align="center">10</td><td align="center">*</td><td align="center">*</td><td align="center">N/A</td><td align="center">*</td><td align="center">*</td></tr><tr><td align="center">11</td><td align="center"><a href="https://whois.ipip.net/cidr/188.43.240.37/32" target="_blank" rel="noopener">188.43.240.37</a></td><td align="center">LesnykhAV-gw.transtelecom.net</td><td align="center">俄罗斯莫斯科 ttk.ru</td><td align="center"><a href="https://whois.ipip.net/AS20485" target="_blank" rel="noopener">AS20485</a></td><td align="center">148.1 / 125.1 / 128.2</td></tr><tr><td align="center">12</td><td align="center"><a href="https://whois.ipip.net/cidr/194.87.146.180/32" target="_blank" rel="noopener">194.87.146.180</a></td><td align="center">unspecified.mtw.ru</td><td align="center">俄罗斯莫斯科 relcom.ru</td><td align="center"><a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a></td><td align="center">148.6 / 141.2 / 119.9</td></tr></tbody></table></li><li><p>沈阳移动去程</p><table><thead><tr><th align="center">跳数</th><th align="center">IP</th><th align="center">主机名</th><th align="center">地区（仅供参考）</th><th align="center">AS号（仅供参考）</th><th align="center">时间（毫秒）</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><a href="https://whois.ipip.net/cidr/192.168.1.1/32" target="_blank" rel="noopener">192.168.1.1</a></td><td align="center">192.168.1.1</td><td align="center">局域网</td><td align="center"></td><td align="center">0.3 / 0.4 / 0.4</td></tr><tr><td align="center">2</td><td align="center"><a href="https://whois.ipip.net/cidr/10.18.0.1/32" target="_blank" rel="noopener">10.18.0.1</a></td><td align="center">10.18.0.1</td><td align="center">局域网</td><td align="center"></td><td align="center">58 / 3 / 2.7</td></tr><tr><td align="center">3</td><td align="center"><a href="https://whois.ipip.net/cidr/111.45.135.25/32" target="_blank" rel="noopener">111.45.135.25</a> * *</td><td align="center">111.45.135.25 * *</td><td align="center">辽宁沈阳 chinamobile.com 移动 N/A N/A</td><td align="center"><a href="https://whois.ipip.net/AS56044" target="_blank" rel="noopener">AS56044</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a> * *</td><td align="center">3.9 * *</td></tr><tr><td align="center">4</td><td align="center"><a href="https://whois.ipip.net/cidr/211.137.47.105/32" target="_blank" rel="noopener">211.137.47.105</a></td><td align="center">211.137.47.105</td><td align="center">辽宁沈阳 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS56044" target="_blank" rel="noopener">AS56044</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">4.8 / 4.7 / 5.6</td></tr><tr><td align="center">5</td><td align="center"><a href="https://whois.ipip.net/cidr/211.137.47.18/32" target="_blank" rel="noopener">211.137.47.18</a></td><td align="center">211.137.47.18</td><td align="center">辽宁沈阳 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS56044" target="_blank" rel="noopener">AS56044</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">4.9 / 4.9 / 4.9</td></tr><tr><td align="center">6</td><td align="center"><a href="https://whois.ipip.net/cidr/211.137.47.17/32" target="_blank" rel="noopener">211.137.47.17</a></td><td align="center">211.137.47.17</td><td align="center">辽宁沈阳 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS56044" target="_blank" rel="noopener">AS56044</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">4.3 / 4.3 / 4.8</td></tr><tr><td align="center">7</td><td align="center"><a href="https://whois.ipip.net/cidr/221.183.19.181/32" target="_blank" rel="noopener">221.183.19.181</a></td><td align="center">221.183.19.181</td><td align="center">辽宁沈阳 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">4.6 / 4 / 4.1</td></tr><tr><td align="center">8</td><td align="center">*</td><td align="center">*</td><td align="center">N/A</td><td align="center">*</td><td align="center">*</td></tr><tr><td align="center">9</td><td align="center"><a href="https://whois.ipip.net/cidr/221.176.21.146/32" target="_blank" rel="noopener">221.176.21.146</a></td><td align="center">221.176.21.146</td><td align="center">北京 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">44.8 / 18.2 / 49.3</td></tr><tr><td align="center">10</td><td align="center"><a href="https://whois.ipip.net/cidr/221.183.46.253/32" target="_blank" rel="noopener">221.183.46.253</a></td><td align="center">221.183.46.253</td><td align="center">北京 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">17.9 / 17.8 / 17.9</td></tr><tr><td align="center">11</td><td align="center"><a href="https://whois.ipip.net/cidr/221.183.30.230/32" target="_blank" rel="noopener">221.183.30.230</a></td><td align="center">221.183.30.230</td><td align="center">北京 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">267.1 / 259.8 / 258</td></tr><tr><td align="center">12</td><td align="center"><a href="https://whois.ipip.net/cidr/223.118.10.190/32" target="_blank" rel="noopener">223.118.10.190</a> <a href="https://whois.ipip.net/cidr/223.118.10.190/32" target="_blank" rel="noopener">223.118.10.190</a> *</td><td align="center">223.118.10.190 223.118.10.190 *</td><td align="center">美国加利福尼亚州洛杉矶 chinamobile.com 移动 美国加利福尼亚州洛杉矶 chinamobile.com 移动 N/A</td><td align="center"><a href="https://whois.ipip.net/AS58453" target="_blank" rel="noopener">AS58453</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a> <a href="https://whois.ipip.net/AS58453" target="_blank" rel="noopener">AS58453</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a> *</td><td align="center">253.4 257 *</td></tr><tr><td align="center">13</td><td align="center"><a href="https://whois.ipip.net/cidr/223.118.10.185/32" target="_blank" rel="noopener">223.118.10.185</a></td><td align="center">223.118.10.185</td><td align="center">美国纽约州纽约 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS58453" target="_blank" rel="noopener">AS58453</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">314.8 / 321.5 / 316.6</td></tr><tr><td align="center">14</td><td align="center"><a href="https://whois.ipip.net/cidr/223.118.10.57/32" target="_blank" rel="noopener">223.118.10.57</a></td><td align="center">223.118.10.57</td><td align="center">美国纽约州纽约 chinamobile.com 移动</td><td align="center"><a href="https://whois.ipip.net/AS58453" target="_blank" rel="noopener">AS58453</a> / <a href="https://whois.ipip.net/AS9808" target="_blank" rel="noopener">AS9808</a></td><td align="center">318.9 / 330.9 / 324.2</td></tr><tr><td align="center">15</td><td align="center">*</td><td align="center">*</td><td align="center">N/A</td><td align="center">*</td><td align="center">*</td></tr><tr><td align="center">16</td><td align="center"><a href="https://whois.ipip.net/cidr/87.245.233.246/32" target="_blank" rel="noopener">87.245.233.246</a> <a href="https://whois.ipip.net/cidr/87.245.233.246/32" target="_blank" rel="noopener">87.245.233.246</a> <a href="https://whois.ipip.net/cidr/87.245.233.246/32" target="_blank" rel="noopener">87.245.233.246</a></td><td align="center">87.245.233.246 ae6-9.RT1.M9.MSK.RU.retn.net 87.245.233.246</td><td align="center">俄罗斯莫斯科 retn.net 俄罗斯莫斯科 retn.net 俄罗斯莫斯科 retn.net</td><td align="center"><a href="https://whois.ipip.net/AS9002" target="_blank" rel="noopener">AS9002</a> <a href="https://whois.ipip.net/AS9002" target="_blank" rel="noopener">AS9002</a> <a href="https://whois.ipip.net/AS9002" target="_blank" rel="noopener">AS9002</a></td><td align="center">364.5 366.5 361.2</td></tr><tr><td align="center">17</td><td align="center">* <a href="https://whois.ipip.net/cidr/185.148.36.101/32" target="_blank" rel="noopener">185.148.36.101</a> *</td><td align="center">* gw6.retn-dtln.mtw.ru *</td><td align="center">N/A 俄罗斯莫斯科 mtw.ru N/A</td><td align="center">* <a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a> *</td><td align="center">* 426.4 *</td></tr><tr><td align="center">18</td><td align="center"><a href="https://whois.ipip.net/cidr/194.87.146.180/32" target="_blank" rel="noopener">194.87.146.180</a> * <a href="https://whois.ipip.net/cidr/194.87.146.180/32" target="_blank" rel="noopener">194.87.146.180</a></td><td align="center">194.87.146.180 * 194.87.146.180</td><td align="center">俄罗斯莫斯科 relcom.ru N/A 俄罗斯莫斯科 relcom.ru</td><td align="center"><a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a> * <a href="https://whois.ipip.net/AS48347" target="_blank" rel="noopener">AS48347</a></td><td align="center">317.9 * 322.3</td></tr></tbody></table></li></ol><h5 id="回程"><a href="#回程" class="headerlink" title="回程"></a>回程</h5><p>回程方面联通大部分地区直连，但是也注意到某些地方的联通回程走了美国，导致延迟上升速度下降(比如山东联通走了美国)，测试结果中移动有走欧洲回程的，延迟依旧上天。</p><ol><li><p>回程到北京电信</p><pre><code>Traceroute to China, Beijing CT (TCP Mode, Max 50 Hop)============================================================traceroute to 180.149.128.1 (180.149.128.1), 50 hops max, 60 byte packets 1  194.87.144.1  1.14 ms  AS48347  Russian Federation Moscow relcom.ru 2  93.95.100.2  1.78 ms  AS48347  Russian Federation Moscow mtw.ru 3  * 4  * 5  * 6  202.97.99.157  211.33 ms  AS4134  China ChinaTelecom 7  202.97.28.237  204.11 ms  AS4134  China Beijing ChinaTelecom 8  202.97.34.157  213.60 ms  AS4134  China Beijing ChinaTelecom 9  *10  180.149.128.1  214.45 ms  AS23724  China Beijing ChinaTelecom</code></pre></li><li><p>回程到北京联通</p><pre><code>Traceroute to China, Beijing CU (TCP Mode, Max 50 Hop)============================================================traceroute to 123.125.99.1 (123.125.99.1), 50 hops max, 60 byte packets 1  194.87.144.1  5.12 ms  AS48347  Russian Federation Moscow relcom.ru 2  9te packets 1  194.87.144.1  8.36 ms  AS48347  Russian Federation Moscow relcom.ru 2  93.95.100.2  1.88 ms  AS48347  Russian Federation Moscow mtw.ru 3  * 4  10.99.99.121  55.74 ms  *  LAN Address 5  10.99.149.10  76.14 ms  *  LAN Address 6  * 7  * 8  221.183.23.37  402.39 ms  AS9808  China Shanghai ChinaMobile 9  221.176.15.205  402.83 ms  AS9808  China Beijing ChinaMobile10  *11  *12  *13  *14  *15  *16  *17  211.136.25.153  403.34 ms  AS56048  China Beijing ChinaMobile</code></pre><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"  style="display:block; text-align:center;"  data-ad-layout="in-article"  data-ad-format="fluid"  data-ad-client="ca-pub-6914153309632048"  data-ad-slot="8639851589"></ins></p><script>  (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3></li></ol><h4 id="youtube播放"><a href="#youtube播放" class="headerlink" title="youtube播放"></a>youtube播放</h4><ul><li><p>河北联通播放视频</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0502.png" alt=""></p></li><li><p>电信使用山东联通中转后播放(山东绕了美国)</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0510.png" alt="4k很勉强，2k还是可以看的"></p></li><li><p>电信直接播放</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0512.png" alt="电信还是算了吧，除非你要求不高..."></p></li></ul><h4 id="Netflix"><a href="#Netflix" class="headerlink" title="Netflix"></a>Netflix</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/0513.png" alt=""></p><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>30卢布要什么自行车，电费和一个公网ip的价格都值了，当然如果你是打算用做科学上网的话不推荐电信/移动使用，买来玩玩不错，配置的时候请万分耐心，配置好之后没事少折腾。</p><p><strong>但是我认为这台机器不值得溢价购买，就算溢价也是10~20元的合理溢价即可，不要助长炒鸡的风气！！！</strong></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> vps评测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps评测 </tag>
            
            <tag> 俄罗斯vps </tag>
            
            <tag> 低价vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centerhop新加坡1.5美元vps评测</title>
      <link href="/posts/centerhop-sgp.html"/>
      <url>/posts/centerhop-sgp.html</url>
      
        <content type="html"><![CDATA[<h1 id="centerhop新加坡vps评测"><a href="#centerhop新加坡vps评测" class="headerlink" title="centerhop新加坡vps评测"></a>centerhop新加坡vps评测</h1><p>大概两个月前瞥见centerhop有1.5美元的新加坡vps出售，他们还提供了<a href="http://lg-sg.centerhop.com/" target="_blank" rel="noopener">looking glass</a>，我用联通下载了一下测速文件，居然还挺快，延迟也很低，所以便入手了。1.5美元买到一台亚太地区的vps，配置尚可，速度也很不错，并且代理的话可以观看新加坡区的Netflix，<strong>官网标称速度 10Mbps burstable to 200Mbps(十兆保证，200兆突发)，在一段时间内到联通可以跑到接近100M的上传速度(直连)，但是估计持续跑满会被限速。</strong>尽管最近1.5美元的vps一直属于缺货状态(目前最便宜的是2.5美元月付的)，但还是写下此评测。</p><p><strong>4.10日再次测试的时候发现回程到山东联通也绕美国了，不知道其他地区怎么样，所以要购买的话请务必先用官方的looking glass测好回程。</strong></p><blockquote><p>实测电信去程走香港pccw，回程绕美，联通部分地区直连，回程singtel到联通，但是还有不少地方的联通回程绕了美国，速度和延迟差异都比较大，建议前往looking glass自己测试一下，移动去程经过日本到新加坡，回程走ntt从日本到香港…还是比较绕的(也有部分地区是经电信绕美回程的)。</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.5美元的配置如下，还算可以，不过当前缺货。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1148.png" alt="1.5美元版配置"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1149.png" alt="2.5美元版配置"></p><p>当前官网销售的最便宜的是2.5美元月付版本，内存和硬盘会大一些。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>下面测试大概都在中午十二点左右进行。</p><p><strong>已经补充晚上十点钟左右的晚高峰测试结果</strong></p><h3 id="Lemonbench测试"><a href="#Lemonbench测试" class="headerlink" title="Lemonbench测试"></a>Lemonbench测试</h3><p>测试结果如下 <a href="https://paste.ubuntu.com/p/mFDGrF5W4t/。" target="_blank" rel="noopener">https://paste.ubuntu.com/p/mFDGrF5W4t/。</a></p><p><strong>晚高峰测试结果如下 <a href="https://paste.ubuntu.com/p/33tNJKmQkp/" target="_blank" rel="noopener">https://paste.ubuntu.com/p/33tNJKmQkp/</a></strong></p><pre><code>-&gt; CPU Performance Test (Fast Mode, 1-Pass @ 5sec) 1 Thread Test:            749 Scores 2 Threads Test:        739 Scores -&gt; Memory Performance Test (Fast Mode, 1-Pass @ 5sec) 1 Thread - Read Test :        12720.55 MB/s 1 Thread - Write Test:        9056.63 MB/s -&gt; Disk Speed Test (4K Block/1M Block, Direct Mode) Test Name        Write Speed                Read Speed 100MB-4K Block        8.5 MB/s (2079 IOPS, 12.31 s)        9.6 MB/s (2336 IOPS, 10.96 s) 1GB-1M Block        1.1 GB/s (1025 IOPS, 0.97 s)        1.3 GB/s (1203 IOPS, 0.83 s) -&gt; Speedtest.net Network Speed Test Node Name            Upload Speed    Download Speed    Ping Latency Speedtest Default        49.48 MB/s    23.98 MB/s    163.85 ms China, Jilin CU 21.35 MB / s 13.21 MB / s 113.11 ms China, Nanning CM        14.89 MB/s    14.95 MB/s    213.79 ms China, Nanjing CT        15.08 MB/s    13.24 MB/s    213.92 ms</code></pre><p>cpu表现还可以，和阿里云学生机的配置差不多，磁盘io也不错，白天的网络测速都还是挺好看的，三网都跑到了100M的速度。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="superbench测试"><a href="#superbench测试" class="headerlink" title="superbench测试"></a>superbench测试</h3><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1200.png" alt="superbench中午测试"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1004.png" alt="晚高峰superbench"></p><p>这个要直观一些，注意，联通的速度差别比较大，因为有直连也有绕美国的连接，所以购买前务必测试清楚。晚高峰的测速数据没那么好看，但是经过后面的实测，到北方联通直连晚高峰依旧能跑到50+Mbps。</p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1202.png" alt="白天的ping"></p><p>在白天，ping值还是可以的，丢包率也不算特别的高(当然如果白天都炸的话那就没救了)。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1008.png" alt="晚高峰ping"></p><p>不出所料，到了晚上线路依旧爆炸，丢包率也很高，不过也实属正常…毕竟想要好线路，就得加钱。</p><h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><ul><li><p>到北方联通测速</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1213.png" alt="中午"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1006.png" alt="北方联通 晚高峰"></p></li><li><p>到南方电信测速</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1214.png" alt=""></p></li></ul><h3 id="上网测试"><a href="#上网测试" class="headerlink" title="上网测试"></a>上网测试</h3><h4 id="youtube"><a href="#youtube" class="headerlink" title="youtube"></a>youtube</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1210.png" alt="河北联通"></p><h4 id="Netflix"><a href="#Netflix" class="headerlink" title="Netflix"></a>Netflix</h4><p>实测可以播放</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/04/1208.png" alt="因为视频无法截图，所以就截封面了"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说对于1.5美元的价格来说，这个机器的配置还是可以的，至于网络呢，如果你是用于代理上网，如果是联通直连的话体验还是很不错的，延迟较低并且速度也比较快，但是电信和移动就不推荐了。再次提醒，买之前先去他们的looking glass好好测试一下。</p><p>购买链接: <a href="https://my.centerhop.com/cart.php?gid=13" target="_blank" rel="noopener">https://my.centerhop.com/cart.php?gid=13</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> vps评测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps评测 </tag>
            
            <tag> 低价vps </tag>
            
            <tag> 亚洲vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>server.it意大利0.99欧vps评测</title>
      <link href="/posts/italy-serverit.html"/>
      <url>/posts/italy-serverit.html</url>
      
        <content type="html"><![CDATA[<h1 id="server-it-意大利0-99欧元vps评测"><a href="#server-it-意大利0-99欧元vps评测" class="headerlink" title="server.it 意大利0.99欧元vps评测"></a>server.it 意大利0.99欧元vps评测</h1><p>最近server.it推出了0.99欧元一月的vps，买了一台试了一试，发现网上基本没有人测试过这家的vps，所以写一篇评测分享一下。简要的说一下，配置是1核2G20G硬盘100M带宽(没有标流量限制，应该是无限流量)，配置还是很不错的，可以建个小站之类的，<strong>支持Netflix</strong>，三网直连(<strong>部分地区联通回程绕美</strong>)。</p><blockquote><ol><li>机器虽说是0.99欧元一个月，但是需要季付起步，也就是一次至少付款2.97欧元</li><li>他家原则上是不支持换ip的，所以如果是用来科学上网的话，请提高姿势，别一下被封了。</li><li>注册的时候区域选中国就好了，如果你选了欧盟还要额外交税的。</li><li>支付方式不支持支付宝/微信/银联，需要paypal/visa等方式支付</li></ol></blockquote><p>如果不想看我下面的废话的可以直接看Lemonbench的测试结果(早上九点左右测试的，所以速度比较快) <a href="https://paste.ubuntu.com/p/TW7sDhsR7D/" target="_blank" rel="noopener">https://paste.ubuntu.com/p/TW7sDhsR7D/</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="早上测试"><a href="#早上测试" class="headerlink" title="早上测试"></a>早上测试</h3><p>早上的网络环境较好，我晚上还会再测一次作为对比</p><h4 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1155.png" alt="早上superbench"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1152.png" alt="lemon bench"></p><p>lemon bench的测试结果，网络速度要好看一些，cpu比较一般(以阿里云的学生机器作为比较，阿里云的铂金8163分数是885分)。</p><p>1核2G内存20G硬盘，作为一个玩具机放个小网站之类的都是不错的，磁盘io多次测试浮动从100MB/s到200MB/s都有出现，不算快不过也能用。本地带宽还是很足的，跑满了100M，到国内的话走北京入口到联通的效果最好，<strong>上海和广州速度比较一般，可能是由于这两个地方的联通回程绕了美国</strong>。早上的时候移动的速度也挺不错。不过speedtest的结果并不算准确，因为影响因素较多，还是iperf测试较为准确。</p><p>然后比较奇怪，今天电信的测速节点基本都没了，还好我本地网络就是电信的，用家宽测一测吧。因为用的是iperf来测试，并且是自己的家宽应该是比测速节点要准确的(测速节点可能会受到测速的人太多的影响而导致结果不准) 分别提供单线程和四线程的上传测试结果，看结果的话，白天的速度还是不错的，单线程20M，多线程60M这样。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1143.png" alt="意大利到南方电信，单线程上传"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1145.png" alt="上传到南方电信4线程"></p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><h5 id="去程路由"><a href="#去程路由" class="headerlink" title="去程路由"></a>去程路由</h5><ul><li><p>天津联通(因为图太长了，所以从北京联通开始看)，直连延迟还算可以</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1159.png" alt="天津联通去程路由"></p></li><li><p>北京电信(天翼云) 去程也是直连，延迟也还算合理</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1202.png" alt="北京电信"></p></li><li><p>常州移动  从南京移动开始截取，去程直连，但是延迟较高估计回程绕路了</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1204.png" alt="常州移动"></p></li></ul><h5 id="回程路由"><a href="#回程路由" class="headerlink" title="回程路由"></a>回程路由</h5><p>回程路由直接截取于<a href="https://paste.ubuntu.com/p/TW7sDhsR7D/" target="_blank" rel="noopener">lemon bench</a>测试结果</p><ul><li><p>回程到北京联通 直连走广州回来的,延迟还挺不错的(我另外测了一下..路由到广州又是走北京回来的，真是奇怪)</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1207.png" alt=""></p></li><li><p>回程到北京电信 电信倒是双程直连</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1210.png" alt=""></p></li><li><p>回程到北京移动 看来回程也是直连的。。无奈移动延迟就是要高一些</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1212.png" alt=""></p></li></ul><p>更多结果请查看lemon bench的测试结果，另外我注意到 <strong>部分地区的联通回程绕美国了，比如上海/广州联通，如果想买又不确定回程的可以联系我帮忙测试。</strong></p><h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>直接贴一张ping.pe的截图。</p><p>早上到国内大部分地区的ping值都在200ms~300ms这样，丢包率还算不错，到美国的延迟比较正常，到欧洲各国的延迟很低(当然)。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1215.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="晚上测试"><a href="#晚上测试" class="headerlink" title="晚上测试"></a>晚上测试</h3><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>作为西欧地区的机器，延迟不可避免的要高一些，不过只要不绕路其实还是可以的，cpu性能不强，但是有2G内存20G硬盘以及100M不限量(应该)的带宽。考虑到月付0.99欧的低廉价格，还是挺不错的一个玩具机。可以建个小网站玩玩，联通用户也可以用来科学上网(不过得先看看是不是直连)。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>购买链接:</p><p><a href="https://www.server.it/" target="_blank" rel="noopener">https://www.server.it/</a></p><p>带aff的链接(随缘好了) <a href="https://checkout.server.it/aff.php?aff=218" target="_blank" rel="noopener">https://checkout.server.it/aff.php?aff=218</a></p>]]></content>
      
      
      <categories>
          
          <category> vps评测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps评测 </tag>
            
            <tag> 低价vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gcore伯力88卢布机器测评以及支付宝支付</title>
      <link href="/posts/gcore-88rub.html"/>
      <url>/posts/gcore-88rub.html</url>
      
        <content type="html"><![CDATA[<h1 id="gcore俄区付款方法及88卢布伯力机器测评"><a href="#gcore俄区付款方法及88卢布伯力机器测评" class="headerlink" title="gcore俄区付款方法及88卢布伯力机器测评"></a>gcore俄区付款方法及88卢布伯力机器测评</h1><p>这段时间有人公布了gcore俄区支付宝支付的”bug”，并且由于其伯力机器离中国极其靠近的地理位置，一个月要不了十块钱的价格等等原因，可以说是非常的火，有不少的人上车，但是这个机器到底如何呢？正好我手上有一台老款的伯力机器所以写一篇测评分享一下吧，顺便分享一下支付宝支付的方法。</p><blockquote><p>前排提醒:</p><ol><li>这篇文章只做测评，请自己考虑到底要不要买</li><li>他家不保证开出的ip在中国大陆的可用性，如果开到被墙ip需要花钱换(应该是3€)</li><li>由于这段时间很多人上车，所以这车并不稳了(其实我在这机器还没什么人买的时候就买过一次了，那个时候表现也只能说尚可)</li><li>现在可以通过浏览器f12的方法调出支付宝的支付接口，但是并不代表以后也可以这么做，也就是说现在的机器就算现在可以付费，但是以后也有可能遇见充值的困难，个人尝试大陆的visa卡是无法付费的。</li><li>伯力机房虽然离中国很近，但是到电信和移动的速度都很惨…</li><li><strong>目前新机器配置发生变动，同样是88卢布</strong> 新款机器配置为 <em>vCPU: 1x | RAM: 512MB | HDD: 7GB SSD | Network speed: 100Mbit/s, 500GB traffic included, 1.156 rubles per 1GB overcommit</em> 而老款限速是500Mbit/s 1000GB流量。</li><li>伯力机器封锁telegram，至少dc5(+86手机号注册的账号所在的数据中心)是无法访问的。</li></ol></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="支付宝付款"><a href="#支付宝付款" class="headerlink" title="支付宝付款"></a>支付宝付款</h2><p>gcore有两个区，国际区地址为 <a href="https://gcorelabs.com/" target="_blank" rel="noopener">https://gcorelabs.com/</a> 支持paypal等支付方式，但是价格较贵，如伯力的最低配机器也要五欧元一月，俄区地址为 <a href="https://ruhosting.gcorelabs.com/" target="_blank" rel="noopener">https://ruhosting.gcorelabs.com/</a> 默认只支持俄罗斯的yandex之类的支付方式，价格较为低廉。</p><p>本来之前付款很麻烦，需要使用国际的万事达预付卡之类的方法付款，但是有一天突然有人公布了一个修改按钮参数调出支付宝支付接口的方法（他家曾经应该是支持支付宝付款的，但是估计人太多了所以他们关闭了支付宝支付，总之，他们的接口还留着…</p><p>方法很简单，在老版UI里面点击Add funds进行充值，先输入充值的数额，至少100卢布(目前还不到十块钱…)，然后打开浏览器的开发者工具，如Chrome的f12，使用定位工具(见图三)点击bank cards的pay按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0610.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0611.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0612.png" alt="使用最左边的按钮，定位支付按钮所在的地方"></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0613.png" alt=""></p><p>点击后跳到下图，找到data-id=”paymethod=5”这一个值，把5改成13，然后回车，再用鼠标点击pay按钮即可调到支付界面。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0615.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0616.png" alt=""></p><p>用支付宝支付即可，然后刷新即可看见账户多了100卢布的余额，这时候在购物车结算的时候就可以选用余额付款了。</p><h2 id="机器测试"><a href="#机器测试" class="headerlink" title="机器测试"></a>机器测试</h2><p>我使用的是老版的88卢布机器，但是配置区别也就是标称的速度快一点，流量多一倍。</p><h3 id="superbench"><a href="#superbench" class="headerlink" title="superbench"></a>superbench</h3><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0630.png" alt=""></p><p>机器性能不算特别好，但是又比justhost，ruvds之类的俄罗斯机器要好一些，io能有100+MB/s，对于个人博客之类的使用也是足够的了。速度测试方面，由于这个ip是广播过来的ip，所以选择的测速节点不准确，等下另外选一个俄罗斯的测速节点进行测试。三网 方面，电信的速度很一般，联通的速度比较优秀(在很多人上车之前，这个速度更快)，移动的速度符合预期的糟糕。</p><h3 id="iperf3测试"><a href="#iperf3测试" class="headerlink" title="iperf3测试"></a>iperf3测试</h3><p>因为speedtest的数据并非完全准确，那么看看iperf3的测试结果吧，为了比较好的代表国际方向的带宽，国际方向的测试用了圣彼得堡的zeptovm和香港的谷歌云。</p><h4 id="圣彼得堡"><a href="#圣彼得堡" class="headerlink" title="圣彼得堡"></a>圣彼得堡</h4><ul><li>上传</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0731.png" alt="伯力上传到圣彼得堡"></p><ul><li><p>下载</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0732.png" alt=""></p></li></ul><h4 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h4><ul><li>上传</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0743.png" alt=""></p><ul><li><p>下载</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0746.png" alt=""></p></li></ul><h4 id="洛杉矶-pacificrack"><a href="#洛杉矶-pacificrack" class="headerlink" title="洛杉矶  pacificrack"></a>洛杉矶  pacificrack</h4><ul><li><p>上传</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0750.png" alt=""></p></li><li><p>下载</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0751.png" alt=""></p></li></ul><h4 id="山东联通"><a href="#山东联通" class="headerlink" title="山东联通"></a>山东联通</h4><ul><li><p>上传</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0752.png" alt=""></p></li><li><p>下载</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0753.png" alt=""></p></li></ul><p>​       因为联通的速度较快，科学上网的话大部分用这台机器的人都用的联通，所以补充一下多线程测速。本地300M联通，多(8)线程下载,接近跑满了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0903.png" alt=""></p><p>补一张播放4k的数据</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0907.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h4 id="关于测试结果"><a href="#关于测试结果" class="headerlink" title="关于测试结果"></a>关于测试结果</h4><p>这个速度算不上特别快，大概是现在用的人太多了吧，还有一点很重要，如果买这个是代理用途，别光看他到国内各地的测速以及延迟，还要看它到世界上各大数据中心的延迟和速度，毕竟伯力属于比较偏僻的地区，周围没有什么数据中心，意味着你要看视频玩游戏之类的还要走很远才行，所以光是大陆方向的测速和延迟好看也不是万能的，当然如果是做站的话还是可以的。</p><h2 id="路由测试"><a href="#路由测试" class="headerlink" title="路由测试"></a>路由测试</h2><p>这次选取电信/联通/移动三个节点测试来回的路由。测试ip为 5.188.3.20 也可以自己测一测</p><h3 id="电信"><a href="#电信" class="headerlink" title="电信"></a>电信</h3><h4 id="去程"><a href="#去程" class="headerlink" title="去程"></a>去程</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0759.png" alt="杭州电信去程"></p><h4 id="回程"><a href="#回程" class="headerlink" title="回程"></a>回程</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0802.png" alt=""></p><h3 id="联通"><a href="#联通" class="headerlink" title="联通"></a>联通</h3><p>电信和联通都是走北京出口的</p><h4 id="去程-1"><a href="#去程-1" class="headerlink" title="去程"></a>去程</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0805.png" alt=""></p><h4 id="回程-1"><a href="#回程-1" class="headerlink" title="回程"></a>回程</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0806.png" alt=""></p><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>移动还是祖传特色，绕路，还是绕美国环游世界，一张图放不下，延迟到了惊人的400+ms！如果是用来科学上网的话别想了(不过移动本来就没有速度)，如果是做站的话可以考虑套上cloudflare cdn并选择香港节点，对于移动还是很友好的。</p><h4 id="去程-2"><a href="#去程-2" class="headerlink" title="去程"></a>去程</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0807.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0808.png" alt=""></p><h4 id="回程-2"><a href="#回程-2" class="headerlink" title="回程"></a>回程</h4><p>回程部分路由不可见..</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0811.png" alt=""></p><h2 id="ping-测试"><a href="#ping-测试" class="headerlink" title="ping 测试"></a>ping 测试</h2><p>通红一片…延迟真的很高啊</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0814.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0815.png" alt=""></p><p>这个延迟，这个丢包率…国内延迟吓人，丢包率也吓人，国外虽然不怎么丢包了，但是延迟也很高，尤其是到美国延迟很高，欧洲好一些。</p><h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>gcore伯力机器因为它看上去很近的地理位置以及低廉的价格，最近很受欢迎，但是必须要注意远东机房即使延迟和测速(特指到大陆)即使很好看，但是它离世界上各大数据中心都不算近，并且最近上车的人太多了，感觉车已“超载”，我不觉得它有某些人说的那么“香”。如果用于做站的话要注意移动绕路严重，必须套上cloudflare的cdn并自选香港之类的节点使用。<strong>他家不保证ip不被墙，不退款，上车需谨慎。</strong>,另外伯力的大部分机器是访问不了Telegram的dc5数据中心的，也就是说+86账号注册的账户基本无法登录，我的+1手机号注册的telegram实测是可以登陆，不过也不能保证所有人都可以。</p><p>不过话说回来了，十块钱不到的玩具机能要求它有多好呢？联通还是可以玩一玩的，移动电信还是绕道吧~</p><p>购买链接: </p><p><a href="https://ruhosting.gcorelabs.com/" target="_blank" rel="noopener">https://ruhosting.gcorelabs.com/</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> vps评测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps评测 </tag>
            
            <tag> 俄罗斯vps </tag>
            
            <tag> 低价vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派直接安装openwrt并同时作为路由/旁路由</title>
      <link href="/posts/raspi-openwrt.html"/>
      <url>/posts/raspi-openwrt.html</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派直接安装openwrt并同时作为路由-旁路由"><a href="#树莓派直接安装openwrt并同时作为路由-旁路由" class="headerlink" title="树莓派直接安装openwrt并同时作为路由/旁路由"></a>树莓派直接安装openwrt并同时作为路由/旁路由</h1><p>之前的一篇文章介绍了我是如何利用docker在树莓派里部署openwrt并作为旁路网关，并测试了一下用它来科学上网的效果，的确方便了很多，docker的部署也比较简单，并且能充分利用树莓派的资源，但是我也发现了一些原因未知的问题，那就是使用docker部署的openwrt作为旁路科学上网的时候，速度上不去，比如播放4k视频速度最快也只能三万kbps出头，同样的线路如果不是在树莓派上运行v2ray客户端而是直接在电脑上运行时，速度可以达到五万+Kbps,但是此时树莓派的cpu也并没有占满，我很好奇如果直接在树莓派上运行openwrt而不是通过docker，效果会是怎么样的。</p><p>一番折腾之后终于在树莓派上安装好了openwrt并能同时作为无线路由/旁路由使用，写下此文作为记录。</p><blockquote><p>感谢<a href="https://mlapp.cn/369.html" target="_blank" rel="noopener">美丽应用</a>提供的openwrt固件以及教程，他的文章非常详细的介绍了如何安装配置等等。</p><p>另外，<a href="https://www.itgeeker.net/" target="_blank" rel="noopener">itgeeker.net</a>(这域名和我的真像…)提供的方法使我成功让树莓派同时作为无线路由/旁路由使用。</p><p>这篇教程中的我的网络结构为 天翼光猫(192.168.1.1)-&gt;tenda ac10(192.168.0.1)-&gt;树莓派(192.168.0.2)</p></blockquote><h2 id="安装openwrt"><a href="#安装openwrt" class="headerlink" title="安装openwrt"></a>安装openwrt</h2><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="选取镜像"><a href="#选取镜像" class="headerlink" title="选取镜像"></a>选取镜像</h3><p>因为美丽应用提供了两种文件系统的镜像，分别是squashfs和ext4，但是默认都只分配1000MB的空间，考虑到我并没有扩展分区的需求，并且squashfs可以方便的恢复初始化而不需要重新写入固件并且手上又正好有一张1GB的sd卡，所以我选择了squashfs的系统镜像。</p><h3 id="写入镜像"><a href="#写入镜像" class="headerlink" title="写入镜像"></a>写入镜像</h3><p>推荐使用工具<a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a>进行系统的写入，操作很简单，把sd卡插到电脑上，在rufus里选择好需要写入的镜像即可。<br><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1049.png" alt=""></p><h3 id="启动并配置系统"><a href="#启动并配置系统" class="headerlink" title="启动并配置系统"></a>启动并配置系统</h3><p>把sd卡插入树莓派,注意如果你家的路由器也使用了192.168.1.x的网段时暂时不要插网线先，因为该系统也默认使用了192.168.1.x的网段。通电，等上大概半分钟后就应该能看到一个名为Openwrt的开放热点了，连接该热点，然后浏览器访问192.168.1.1进行配置。</p><p>从这里开始，要做的和美丽应用的教程里的就不太一样了，我们不需要再添加WAN以及设置，只需要设置LAN即可。我们首先需要设置LAN的ip段和主路由同一段但是需要注意的是，直接在浏览器里设置LAN的ip段大概率是无法成功的(至少我没有成功)，我们需要通过ssh连接到openwrt上进行操作(密码也是password)。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 编辑网络配置文件 </span><span class="token function">vi</span> /etc/config/network<span class="token comment" spellcheck="true"># 将lan口编辑成类似于这样的形式,gateway填主路由ip，dns随意</span>config interface <span class="token string">'lan'</span>        option <span class="token function">type</span> <span class="token string">'bridge'</span>        option ifname <span class="token string">'eth0'</span>        option proto <span class="token string">'static'</span>        option ipaddr <span class="token string">'192.168.0.2'</span>        option netmask <span class="token string">'255.255.255.0'</span>        option gateway <span class="token string">'192.168.0.1'</span>        list dns <span class="token string">'223.5.5.5'</span><span class="token comment" spellcheck="true"># 然后重启网络</span>/etc/init.d/network restart</code></pre><p>执行上述操作之后，网络会暂时断开，这时候如果你之前没插上网线，现在就可以插上了。</p><p>等待半分钟后再次连接，使用192.168.0.2进入openwrt配置界面，修改网络-&gt;接口-&gt;lan,把dhcp服务-高级选项中的强制dhcp开启，如果本地没有ipv6的话把ipv6分配长度设为禁用，并且把dhcp服务器-ipv6设置里面的路由通告和dhcp6都给关闭。<em>这些操作理论上也可以在第一次登陆的时候进行</em></p><p>配置完毕之后建议再次断开连接，等半分钟再连接Openwrt的热点，此时应该是可以上网了的(如果不行，重启一下openwrt)，并且分配到的ip和直接连接主路由分配的ip属于同一段。</p><h2 id="树莓派路由"><a href="#树莓派路由" class="headerlink" title="树莓派路由"></a>树莓派路由</h2><p>不得不说，实际体验上，树莓派直接运行openwrt感觉要比docker中运行openwrt要舒服一些，占用更低了，平时cpu占用不超过1%(也许算是一种浪费？)，也不像docker运行时那么多bug了(如软件包安装出错，也许只是我没配置好…),最为重要的是，运行v2ray的时候，速度突破了docker运行时的30mbps，达到了40mbps甚至50mbps，也许还能更快。</p><h3 id="作为无线路由"><a href="#作为无线路由" class="headerlink" title="作为无线路由"></a>作为无线路由</h3><p>直接连接Openwrt的热点时，树莓派直接起到了无线路由器的作用，这个固件默认创建的热点属于5ghz wifi，传输速率要比我想象的要快(仅限于一个比较小的范围内，如在一个房间里面)，连接树莓派创建的5ghz wifi，在电脑上运行iperf3测速(网络接口速度显示300Mbps)。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1108.png" alt=""></p><p>直接访问youtube看看4k，比原来docker时的测试要快不少了，此时的系统占用也要低一些。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1127.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1129.png" alt="此时的占用"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="作为旁路由"><a href="#作为旁路由" class="headerlink" title="作为旁路由"></a>作为旁路由</h3><p>考虑到树莓派内置的无线网卡发射功率比较小，只能在一个比较小的范围内接收到信号，所以还是要充分利用家里已有的路由器，在这里，树莓派将作为旁路网关来处理数据，操作也很简单，只需要我们连接wifi的时候手动把网关和dns服务器都设置成192.168.0.2 <em>树莓派的ip</em> 即可，如果主路由还接了其他的路由器，那直接把其他的路由器的网关设为192.168.0.2，然后连接其他路由器的设备就不用再设置网关了。</p><p>这次测试中连接主路由的5ghz wifi，网关设置为树莓派。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1139.png" alt=""></p><p>效果也是相当不错的。</p><h3 id="参考对照"><a href="#参考对照" class="headerlink" title="参考对照"></a>参考对照</h3><p>尝试直接连接5ghz wifi使用默网关，并在电脑上运行v2ray客户端。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1142.png" alt=""></p><p>看来仍然有一定的差距。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你的树莓派还有其他的作用，那么个人感觉还是在docker里面运行openwrt作为旁路由就够了，如果你有多个树莓派，或者树莓派吃灰了，又或者你有在宿舍弄一个无线路由器的需求(这个openwrt镜像内置了mentohust，可以进行锐捷之类的认证拨号)那么直接装成openwrt就好了。不过在上面的比较中，电脑直接运行v2ray还是要快一些的(暂时不知道原因)，就是没那么方便罢了。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> openwrt </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无公网ip家宽进行流量中转</title>
      <link href="/posts/nat-transit-proxy.html"/>
      <url>/posts/nat-transit-proxy.html</url>
      
        <content type="html"><![CDATA[<h1 id="无公网ip家宽进行中转"><a href="#无公网ip家宽进行中转" class="headerlink" title="无公网ip家宽进行中转"></a>无公网ip家宽进行中转</h1><p>最近nat小鸡可以说是相当的火，买nat的人大多有两种用途——需要公网ip来进行frp等端口转发等服务，或者是需要“借道”诸如联通网络/电信CN2网络来进行上网代理的中转加速。但是市面上的nat太多了，其间鱼龙混杂，有的价格惊人，有的流量很少，有的超售得离谱…总之想要找到靠谱的商家很难。就像下面这张图一样。</p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1154.png" style="zoom: 33%;" /><p>不过其实也不是完全没办法，只要你有一个使用联通家宽/电信CN2宽带的朋友，再发挥一点想象力……一台无限流量，带宽基本有保障(比如很多地方联通上传速度大概30mbps)的机器就出现了。<strong>以下方法请自己用就好了，不要用于盈利之类的活动</strong></p><p>你可能有疑问，比如不是家家都有公网ip，而缺少公网ip是一个严重的问题，没有公网ip该如何连接呢？</p><p>自然，如果你的朋友的家宽能申请到公网ip的话，只要他家有个树莓派/废弃电脑/常开机的电脑之类的设备，就可以当作是一个ddns的联通服务器来玩了，直接使用iptables/socat来进行流量中转即可，不过看了标题就知道，我这篇文章并不讨论有公网ip的机器中转问题。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>要想实现无公网ip的机器的中转，我们需要建立p2p连接，涉及到下面这些知识</p><h3 id="udp打洞"><a href="#udp打洞" class="headerlink" title="udp打洞"></a>udp打洞</h3><blockquote><p>通过<a href="https://zh.wikipedia.org/wiki/UDP" target="_blank" rel="noopener">UDP</a>路由验证实现<a href="https://zh.wikipedia.org/wiki/NAT" target="_blank" rel="noopener">NAT</a>穿越是一种在处于使用了NAT的私有网络中的<a href="https://zh.wikipedia.org/wiki/Internet" target="_blank" rel="noopener">Internet</a>主机之间建立双向UDP连接的方法。由于NAT的行为是非标准化的，因此它并不能应用于所有类型的NAT。</p><p>其基本思想是这样的：让位于NAT后的两台主机都与处于公共地址空间的、众所周知的第三台服务器相连，然后，一旦NAT设备建立好UDP状态信息就转为直接通信，并寄希望于NAT设备会在分组其实是从另外一个主机传送过来的情况下仍然保持当前状态。</p></blockquote><blockquote><p>步骤一：A和B分别和S建立UDP连接；NAT设备N1和N2创建UDP转换状态并分配临时的外部端口号</p><p>步骤二：S检查UDP包，看A和B的端口是否是正在被使用的（否则的话N1和N2应该是应用了端口随机分配，这会让路由验证变得更麻烦）</p><p>步骤三：如果端口不是随机化的，那么A和B各自选择端口X和Y，并告知S。S会让A发送UDP包到P2:Y，让B发送UDP包到P1:X</p><p>步骤四：A和B通过转换好的IP地址和端口直接联系到对方的NAT设备；</p></blockquote><p>上面的选择维基百科，翻译的不咋地，掘金<a href="https://juejin.im/entry/5b5d9232f265da0f9f4e7448" target="_blank" rel="noopener">^1</a> 有一篇文章比较简易的介绍了udp打洞。注意不是所有的nat网络类型都适用与udp打洞，实际可行性还是需要自己测试的，不过我的几次测试都成功了。</p>]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
            <tag> 网络技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建/迁移wordpress</title>
      <link href="/posts/deplou-wordpress.html"/>
      <url>/posts/deplou-wordpress.html</url>
      
        <content type="html"><![CDATA[<h1 id="快速搭建wordpress并迁移原数据"><a href="#快速搭建wordpress并迁移原数据" class="headerlink" title="快速搭建wordpress并迁移原数据"></a>快速搭建wordpress并迁移原数据</h1><p>因为之前的一个网站放在国内并且使用的是备案的域名，总觉得有诸多不好的地方，然后这几天网站又出了一些问题，索性直接搬迁到国外去并更换域名。</p><blockquote><p>新服务器系统为ubuntu1804 使用nginx作为web服务器</p></blockquote><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>首先请先备份数据库，我直接使用phpmyadmin的导出功能导出了wordpress.sql，当然你也可以在命令行使用mysql命令来导出。另外我们的主题/插件等文件都放在wordpress目录下的wp-content里面，所以我直接压缩了该文件。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- igeeker-横向广告 --><p><ins class="adsbygoogle"     style="display:block"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="3762929425"     data-ad-format="auto"     data-full-width-responsive="true"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="安装wordpress"><a href="#安装wordpress" class="headerlink" title="安装wordpress"></a>安装wordpress</h2><h3 id="配置环境并安装wordpress"><a href="#配置环境并安装wordpress" class="headerlink" title="配置环境并安装wordpress"></a>配置环境并安装wordpress</h3><h4 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h4><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>这次我使用的是mariadb，直接使用下列命令安装即可。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> mariadb-server mariadb-client<span class="token comment" spellcheck="true">#安装完毕后，可以运行下列命令去安全初始化数据库</span><span class="token function">sudo</span> mysql_secure_installation<span class="token comment" spellcheck="true">#然后重启数据库</span><span class="token function">sudo</span> systemctl restart mariadb</code></pre><h5 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h5><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#登录数据库</span><span class="token function">sudo</span> mysql -u root -p<span class="token comment" spellcheck="true">#因为我们之后要导入一个新的数据库，所以暂时就先创建一个临时数据库好了</span>CREATE DATABASE temp_db<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#创建用户并授权，如果这里不想给*权限的话，之后导入新的数据库之后记得再次授权</span>CREATE USER <span class="token string">'wp_user'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'type_password_here'</span><span class="token punctuation">;</span>GRANT ALL ON temp_db.* TO <span class="token string">'wp_user'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'type_user_password_here'</span> WITH GRANT OPTION<span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span>EXIT<span class="token punctuation">;</span></code></pre><h5 id="一个小问题"><a href="#一个小问题" class="headerlink" title="一个小问题"></a>一个小问题</h5><p>也许你注意到了，我们安装的数据库使用<code>mysql -u root -p</code>登陆时，无论输入的是什么密码都可以登陆成功，因为mysql(mariadb)默认使用了<em>auth_socket</em>插件，可以让你直接在本机上无需密码登陆数据库，如果要改成需要密码登陆的话，可以使用下面这条命令修改，不过建议要改的话还是等到完成所有安装步骤之后再改。</p><p><code>UPDATE mysql.user SET plugin = &#39;mysql_native_password&#39; WHERE user = &#39;root&#39; AND host = &#39;localhost&#39;;</code></p><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><h5 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h5><p><code>sudo apt install nginx</code></p><h5 id="安装并配置运行所需的php模块"><a href="#安装并配置运行所需的php模块" class="headerlink" title="安装并配置运行所需的php模块"></a>安装并配置运行所需的php模块</h5><p><code>sudo apt install php-fpm php-common php-mbstring php-xmlrpc php-soap php-gd php-xml php-intl php-mysql php-cli php-ldap php-zip php-curl</code></p><p>要修改php的配置的话(如调整上传的文件的上限等等)，编辑下面这个文件</p><p><code>sudo nano /etc/php/7.2/fpm/php.ini</code></p><h5 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h5><p>在nginx中新增名为wordpress的站点</p><p><code>sudo nano /etc/nginx/sites-available/wordpress</code></p><pre><code>server {    listen 80;    listen [::]:80;    root /var/www/html/wordpress;    index  index.php index.html index.htm;    server_name  example.com www.example.com; #填你的域名     client_max_body_size 100M;    location / {        try_files $uri $uri/ /index.php?$args;            }    location ~ \.php$ {    include snippets/fastcgi-php.conf;    fastcgi_pass             unix:/var/run/php/php7.2-fpm.sock;    fastcgi_param   SCRIPT_FILENAME $document_root$fastcgi_script_name;    }}</code></pre><p><code>sudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/</code></p><h5 id="站点https配置"><a href="#站点https配置" class="headerlink" title="站点https配置"></a>站点https配置</h5><p>我直接使用了certbot-nginx的插件来自动获取并配置let’s encrypt的https证书。</p><p>使用方法查看<a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx" target="_blank" rel="noopener">https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx</a></p><p>配置好之后，选择了redirect，把80重定向到443端口，强制https访问。</p><h4 id="下载安装wordpress"><a href="#下载安装wordpress" class="headerlink" title="下载安装wordpress"></a>下载安装wordpress</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /var/www/html <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://wordpress.org/latest.tar.gz<span class="token function">tar</span> -zxvf latest.tar.gz<span class="token function">sudo</span> <span class="token function">chown</span> -R www-data:www-data /var/www/html/wordpress/<span class="token function">sudo</span> <span class="token function">chmod</span> -R 755 /var/www/html/wordpress/</code></pre><p>修改wordpress配置文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /var/www/html/wordpress/wp-config.php</code></pre><p>需要修改DB_NAME为之前创建的数据库名字(temp_db)，以及DB_USER和DB_PASSWORD也要改成之前新建的wp_user对应的字段</p><p>重启nginx</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart nginx.service<span class="token function">sudo</span> systemctl restart php7.2-fpm.service</code></pre><p>访问 <a href="https://example.com" target="_blank" rel="noopener">https://example.com</a> 理论上会出现wordpress的安装界面，如果是建立新站的话到这就差不多了。</p><p>执行完安装步骤，<a href="https://example.com已经处于可以访问的状况，显示wordpress默认的界面。" target="_blank" rel="noopener">https://example.com已经处于可以访问的状况，显示wordpress默认的界面。</a></p><h2 id="恢复之前的数据"><a href="#恢复之前的数据" class="headerlink" title="恢复之前的数据"></a>恢复之前的数据</h2><h3 id="安装phpmyadmin"><a href="#安装phpmyadmin" class="headerlink" title="安装phpmyadmin"></a>安装phpmyadmin</h3><p>大部分时候用phpmyadmin还是更加方便操作的</p><p><code>apt install phpmyadmin</code></p><p>注意安装的过程中他会让你选web服务器，由于我们使用的nginx不在他的列表里面，所以都不选跳过就好，然后数据库配置的话。</p><p>创建软链接</p><p><code>sudo ln -s /usr/share/phpmyadmin /var/www/html/wordpress</code>，</p><p>重启一下nginx之后，我们直接访问  <a href="https://example.com/phpmyadmin" target="_blank" rel="noopener">https://example.com/phpmyadmin</a> 即可，使用之前的wp_user登陆就可以了，然后新建一个名为wp_database的数据库，并在数据库里执行导入，把之前导出的数据导入到数据库中。然后修改wp-config.php，修改数据库的名字。</p><p>此时如果重启nginx再访问，会发现网站一片空白，不过别急，因为我们之前的wp-content文件还没传过来，没有资源文件自然一片空白，先删除当前的wp-content，然后通过sftp之类的方法把之前的服务器上的wp-content传输过来，再重启nginx，此时我们之前的网站已经迁移到新的服务器上了。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>传输过来的wp-content文件可能存在权限问题，再次执行chown 和 chmod即可。<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle"   style="display:block; text-align:center;"   data-ad-layout="in-article"   data-ad-format="fluid"   data-ad-client="ca-pub-6914153309632048"   data-ad-slot="8639851589"></ins><script>   (adsbygoogle = window.adsbygoogle || []).push({});</script></li></ul>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看雪安全接入创建虚拟局域网</title>
      <link href="/posts/ksa-network.html"/>
      <url>/posts/ksa-network.html</url>
      
        <content type="html"><![CDATA[<h1 id="看雪ksa组建虚拟局域网-简单高效"><a href="#看雪ksa组建虚拟局域网-简单高效" class="headerlink" title="看雪ksa组建虚拟局域网 简单高效"></a>看雪ksa组建虚拟局域网 简单高效</h1><h2 id="frp-Zerotier-ksa"><a href="#frp-Zerotier-ksa" class="headerlink" title="frp/Zerotier/ksa"></a>frp/Zerotier/ksa</h2><p>除了frp外，想要组建虚拟局域网进行流量转发还有一个很有名的方案就是<a href="http://zerotier.com/" target="_blank" rel="noopener"><strong>Zerotier</strong></a>， Zerotier的优点是不需要机器拥有公网ip且配置相当简单，可以在第三方服务器的“牵线”下打洞建立连接，<a href="https://zhih.me/zerotier-getting-started/" target="_blank" rel="noopener">Zerotier介绍</a>。但是缺点也相当明显，进行iperf3测速时，虽然一开始速度能够跑满上传带宽，但在跨运营商（我还不知道同运营商会不会有这个问题）等情况下，只能做“三秒真男人”，速度很快就会骤降，<del>因为Zerotier的传输使用的是udp，而国内目前udp环境恶劣，极易被运营商限制。</del> <del>有大佬说是因为moon服务器的问题，但是我用国内的阿里云自建了一个moon服务器后，这种状况依旧没有改善太多…原因依旧未知 <a href="https://opt.gs/posts/56602/" target="_blank" rel="noopener">参考教程</a></del></p><p>如图，Zerotier一开始跑的相当的快，然而一段时间后就突然暴毙，这种现象在晚高峰尤其常见。<br><img src="https://i.loli.net/2020/03/06/rdOnBp7DuIsZ8am.png" alt="image.png"></p><p>那么有没有使用tcp来进行p2p连接建立虚拟局域网的软件呢？今天发现了一个神器，<a href="https://ksa.kanxue.com/" target="_blank" rel="noopener">看雪安全接入KSA</a>，今天实测<del>tcp打洞(貌似并非tcp)</del>建立连接后跑满了联通机器的上传带宽，且基本不受QOS影响。</p><p>但是遇到了一个问题，查看linux服务端，貌似开启的p2p连接是使用udp的，如果强制使用tcp时貌似无法建立p2p连接，而是经过看雪的服务器来中转，这样就很慢了，但是不知道是不是udp伪装成了tcp？ksa要比zerotier稳定很多，可以长时间跑满上传带宽且不会突然失去速度， <strong>希望清楚原因的大佬可以为我解释一下。。</strong></p><p>使用ksa打洞连接之后，满速跑了五分钟都没有被制裁<br><img src="https://i.loli.net/2020/03/06/H7jpIKCfGW8NRhO.png" alt="image.png"></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><!-- igeeker-横向广告 --><p><ins class="adsbygoogle"     style="display:block"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="3762929425"     data-ad-format="auto"     data-full-width-responsive="true"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>同一时段frp和ksa对比</p><ul><li><p>frp<br><img src="https://i.loli.net/2020/03/06/dxpYqQHAiW5FBS8.png" alt="image.png"></p></li><li><p>ksa<br><img src="https://i.loli.net/2020/03/06/N8sSRtJlPo9Vhw4.png" alt="image.png"></p><p>  在晚上中转某不可言说之软件后播放视频的速度<br>  <img src="https://i.loli.net/2020/03/06/2Avtb9uTKLoPy3W.png" alt="image.png"></p></li></ul><h2 id="KSA安装"><a href="#KSA安装" class="headerlink" title="KSA安装"></a>KSA安装</h2><p>ksa目前还处于测试阶段，不过也有了linux各种架构的版本了，前往论坛页面下载<a href="https://bbs.pediy.com/thread-252417.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-252417.htm</a>, 官方也有一个简易的<a href="https://bbs.pediy.com/thread-252417.htm" target="_blank" rel="noopener">教程</a></p><p>ksa需要一个机器运行服务端，另一个机器运行客户端，默认配置文件ksa.conf如下</p><pre><code>#[log]=klog.log#[host]=nat.kanxue.com#[udp]=0######## SERVER CFG #########[nat_nic]=eth0#[nat_tun]=2#[dhcp_ip]=10.0.0.1#[dhcp_mask]=255.255.255.0#[dhcp_dns]=114.114.114.114#[cipher]=aes_256_cfb#[route]=#192.168.0.0/255.255.255.0#192.168.2.0/255.255.255.0#################################### CLIENT CFG #########[uid]=#[psk]=#[tun_name]=ksa_tun1#[tun_ip]=10.0.0.10#[fwd]=1############################</code></pre><h3 id="ksa服务端"><a href="#ksa服务端" class="headerlink" title="ksa服务端"></a>ksa服务端</h3><p>服务端其实可以不对这个配置文件做任何修改，直接<code>chmod +x ksa_x64</code>再用<code>./ksa_x64</code>即可运行，成功运行后会显示服务端使用的uid以及psk，记下等下用于配置客户端。</p><p><strong>注意，服务端的路由配置部分，如果你发现这里面有网段和你本地的网段一样，那么记得手动指明路由，不然可能会和本地冲突导致局域网断连</strong></p><p>如我本地使用了192.168.0.0/24的网络，如果不手动指明而是用默认值的话，接入ksa的设备会默认添加一条路由规则，使得192.168.0.0/24的数据也走ksa_tun隧道，这样就会导致局域网无法连接。</p><pre><code>[route]=#192.168.0.0/255.255.255.0#192.168.2.0/255.255.255.010.0.0.0/255.255.255.0</code></pre><h3 id="ksa客户端"><a href="#ksa客户端" class="headerlink" title="ksa客户端"></a>ksa客户端</h3><p>在客户端上只需要简单修改uid和psk即可，其它的也不用管，运行方式一样。</p><p>在服务端和客户端都运行之后，使用ifconfig应该就可以看见虚拟局域网下的ip了。<em>虽然默认[udp]=0</em>但是实际使用种，一开始ksa服务端就显示udp link，不知道为什么…</p><h3 id="更新配置后重新运行"><a href="#更新配置后重新运行" class="headerlink" title="更新配置后重新运行"></a>更新配置后重新运行</h3><p>在更改配置文件后需要结束进程再重新运行ksa，使用命令<br><code>ps aux |grep ksa</code>即可找出ksa进程号并kill。</p><h3 id="一些问题的解决"><a href="#一些问题的解决" class="headerlink" title="一些问题的解决"></a>一些问题的解决</h3><h4 id="开启ksa后局域网无法连接"><a href="#开启ksa后局域网无法连接" class="headerlink" title="开启ksa后局域网无法连接"></a>开启ksa后局域网无法连接</h4><p>在树莓派上使用ksa的时候出现了一个较为麻烦的问题…开启ksa后，ssh即断开。通过先frp把ssh转发到其他的服务器上，再开启ksa，发现ssh依旧可以连接，确认只是局域网断开连接。</p><p>使用route -n查看当前的路由规则，发现一条:<code>192.168.0.0     0.0.0.0         255.255.255.0   U     0      0        0 ksa_tun</code>，使用<code>route del -net 192.168.0.0/24 gw 0.0.0.0 dev ksa_tun</code>删除该规则后局域网中又可以连接了</p><h2 id="个人体验"><a href="#个人体验" class="headerlink" title="个人体验"></a>个人体验</h2><p>个人体验下，ksa要比zerotier稳定很多，建立局域网后就可以结合socat或者dokodemo-door来中转流量了，不知道同样使用udp(应该)是怎么做到的，之后我还要多多研究。还有就是目前我还不知道两个没有公网ip的机器之间连接效果如何，还有待测试。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络工具 </tag>
            
            <tag> 虚拟局域网 </tag>
            
            <tag> p2p </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freedom Network</title>
      <link href="/posts/freedom-network.html"/>
      <url>/posts/freedom-network.html</url>
      
        <content type="html"><![CDATA[<h1 id="V2ray个人使用笔记，暂不公开"><a href="#V2ray个人使用笔记，暂不公开" class="headerlink" title="V2ray个人使用笔记，暂不公开"></a>V2ray个人使用笔记，暂不公开</h1><p>由于之前使用的digitalocean搭配shadowsocks速度实在是太慢了，而且shadowsocks的流量也容易被识别导致被封禁（之前很长一段时间没被封可能是因为速度太慢，通过的流量太少，没有触发gfw的机制），正好今年的黑色星期五长期缺货的搬瓦工CN2 GIA-E线路限量vps补货了<a href="https://stock.bwg.net/" target="_blank" rel="noopener">查看库存</a>（其实我是先买了hostdare的服务器用了两天才发现搬瓦工补货了，于是退掉了hostdare的vps，不得不说hostdare的退款还是相当干脆的，就是工单处理的有些慢，也许员工感恩节放假去了吧~）</p><p>虽然搬瓦工的限量版服务器只有500GB的流量，并且双向计费，也就是说如果用于代理，需要同时计算下行与上行流量，这样的话一个月可以用于代理的流量只有250GB了，比不上之前的hostdare 1TB流量，但是搬瓦工的线路有一点好处就是三网回程走的都是CN2 GIA线路，而hostdare只有电信的回程走的是gia线路，搬瓦工的线路质量要更高一些，丢包率和高峰时段速率都要更胜一筹。</p><p>这篇文章记录了我是如何在搬瓦工的vps上搭建v2ray并进行伪装以及套上cdn的。</p><h2 id="通过certbot获得ssl证书"><a href="#通过certbot获得ssl证书" class="headerlink" title="通过certbot获得ssl证书"></a>通过certbot获得ssl证书</h2><p>想要使用tls加密我们首先需要获得ssl证书，我们可以访问<a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx" target="_blank" rel="noopener"> https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx </a>，并在网页上选择我们的操作系统与web服务器软件获得具体的安装说明，为了之后的网站伪装，这里web服务器软件请选择<strong>nginx</strong>。根据操作我们即可获得免费的ssl证书，证书储存在<code>/etc/letsencrypt/live/ray.example.com</code>路径下，分别为证书文件cert.pem，与私匙privkey.pem，我们待会需要使用。</p><h2 id="安装V2RAY"><a href="#安装V2RAY" class="headerlink" title="安装V2RAY"></a>安装V2RAY</h2><p>这里直接使用了V2-UI的面板来进行V2RAY的安装，使用面板的安装脚本安装面板的同时也会安装好V2RAY，v2-ui<a href="https://github.com/sprov065/v2-ui" target="_blank" rel="noopener">项目地址</a>,使用命令<code>bash &lt;(curl -Ls https://blog.sprov.xyz/v2-ui.sh)</code>，在面板里我们可以很轻松的配置好v2ray的账户并分享。</p><h2 id="直接使用v2ray-websocket-tls-nginx的方式"><a href="#直接使用v2ray-websocket-tls-nginx的方式" class="headerlink" title="直接使用v2ray+websocket+tls+nginx的方式"></a>直接使用v2ray+websocket+tls+nginx的方式</h2><p>这里我们将使用v2ray的ws+tls方式来代理我们的流量，并用nginx来将流量伪装成一个网站的正常流量（尽管我怀疑gfw依旧有办法识别，不过好歹伪装一下吧）。</p><p>直接在v2-ui里面新建账号，配置如下</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0219.png" alt=""></p><p>注意，监听本地ip即可，因为之后我们真正访问的是443端口，再由nginx将我们的访问转发至该端口。</p><p>然后修改nginx的配置文件(之前使用certbot脚本自动设置https的时候这个文件会被修改)</p><p><code>nano /etc/nginx/sites-enabled/default</code>，注意，该文件实际上是个软链接，指向sites-available中的同名文件在第二个server的括号（也就是# SSL configuration的括号中增加以下内容）。</p><pre><code>    location /breakthrough {  #这个路径也是之前在v2-ui中设置的        proxy_redirect off;        proxy_pass https://127.0.0.1:10000; #这个端口就是你之前设定的v2ray监听的本地端口        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }</code></pre><p>配置好之后重启v2ray以及nginx，之后访问<a href="https://ray.example.com" target="_blank" rel="noopener">https://ray.example.com</a> 即可看见nginx的欢迎提示，如果访问的是<a href="https://ray.example.com/breakthrough" target="_blank" rel="noopener">https://ray.example.com/breakthrough</a> 则会显示bad request，因为我们的访问被交给v2ray处理了，到这里我们便配置好了，注意现在不能直接使用v2-ui导出的账户，若要使用，我们需要手动修改地址与端口。</p><p>我们还可以在网上找一些静态的网站模板放到/var/www/html中用来展示（虽然我也不知道这样是否有用</p><h2 id="在v2ray-websocket-tls-nginx的基础上使用cloudflare"><a href="#在v2ray-websocket-tls-nginx的基础上使用cloudflare" class="headerlink" title="在v2ray+websocket+tls+nginx的基础上使用cloudflare"></a>在v2ray+websocket+tls+nginx的基础上使用cloudflare</h2><p>为了翻墙，人们可真是什么方法都想得出来，如果你想稳妥一点，或者你的ip被封了，我们还可以再在之前的基础上套上一层CDN，实测速度还是不错的，可以比较流畅的观看720p视频，就是不知道未来gfw会不会有相应的对策。</p><p>我们使用的是cloudflare的cdn，首先注册一个cloudflare的账户，之后它会提示你<strong>add site</strong>，添加主域名后，会有页面提示，要求你将域名的dns服务器换成cloudflare的dns服务器，这个需要你去你注册域名的地方修改，修改之后在cloudflare的网站上点击检查域名，可能要等上十几二十分钟，域名服务器的修改才会生效，之后你便可以在cloudflare的网站上修改你的dns解析了，这里我们使用一个新的二级域名 cdn.example.com 指向我们的vps的ip，注意，当黄色的云朵亮起的时候走的即是cdn的线路，此时你使用nslookup查询域名查到的不是你的vps的ip而是cloudflare的服务器的ip。</p><p>我们在这里使用cloudflare提供的ssl证书!</p><p>点击create certificate可以创建一个有效期十五年的证书，注意在这里要记录好private key，不然之后就查不到了。我们在vps上分别创建证书文件以及私匙文件，并把这里显示的内容复制进去。</p><p>之后使用在<code>/etc/nginx/sites-available/</code>中创建一个虚拟服务器的配置文件，我这里取名为cdn</p><pre><code>server {    root /var/www/html/new;    # Add index.php to the list if you are using PHP    index index.html index.htm index.nginx-debian.html;    server_name cdn.example.com;    location / {        # First attempt to serve request as file, then        # as directory, then fall back to displaying a 404.        try_files $uri $uri/ =404;    }    location /cdn {        proxy_redirect off;        proxy_pass https://127.0.0.1:10000;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }    listen [::]:443 ssl;     listen 443 ssl;     ssl_certificate /home/ssl/cert.pem;    ssl_certificate_key /home/ssl/key.pem;    include /etc/letsencrypt/options-ssl-nginx.conf;     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; }server {    if ($host = cdn.example.com) {        return 301 https://$host$request_uri;    }     listen 80 ;    listen [::]:80 ;    server_name cdn.example.com;    return 404; }</code></pre><p>按照这样编辑好之后在<code>/etc/nginx/sites-enabled/</code>里面创建一个指向该文件的软链接，重启nginx</p><p>之后我们访问<a href="https://cdn.example.com也可以看见nginx的欢迎界面，而访问https://cdn.example.com/ray则会显示bad" target="_blank" rel="noopener">https://cdn.example.com也可以看见nginx的欢迎界面，而访问https://cdn.example.com/ray则会显示bad</a> request，到这里配置完成，之后客户端的配置和直连类似。</p><h3 id="关于不同的域名配置"><a href="#关于不同的域名配置" class="headerlink" title="关于不同的域名配置"></a>关于不同的域名配置</h3><p>如果使用ws+web的方式我们可以同时使用两个域名，一个通过cloudflare连接另一个直连，只需要另外再申请一个证书并按照下面的格式再配置一个域名即可，</p><pre><code>server {    root /var/www/html;    # Add index.php to the list if you are using PHP    index index.html index.htm index.nginx-debian.html;    server_name do.better06.xyz; # managed by Certbot    location / {        # First attempt to serve request as file, then        # as directory, then fall back to displaying a 404.        try_files $uri $uri/ =404;    }    location /bwall {        proxy_redirect off;        proxy_pass https://127.0.0.1:10000;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }    location /freeshare {        proxy_redirect off;        proxy_pass https://127.0.0.1:10001;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }    listen [::]:443 ssl; # managed by Certbot    listen 443 ssl; # managed by Certbot    ssl_certificate /home/ssl/cert.pem; # managed by Certbot    ssl_certificate_key /home/ssl/key.pem; # managed by Certbot    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot}server {    if ($host = do.better06.xyz) {        return 301 https://$host$request_uri;    } # managed by Certbot    listen 80 ;    listen [::]:80 ;    server_name do.better06.xyz;    return 404; # managed by Certbot}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派旁路由科学上网体验</title>
      <link href="/posts/raspberry-openwrt-v2.html"/>
      <url>/posts/raspberry-openwrt-v2.html</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派旁路由科学上网体验"><a href="#树莓派旁路由科学上网体验" class="headerlink" title="树莓派旁路由科学上网体验"></a>树莓派旁路由科学上网体验</h1><p>之前的一篇文章<a href="https://igeeker.me/wanji/dockeropenwrt/">树莓派使用docker部署openwrt</a>记录了我是如何通过docker在树莓派上使用openwrt并作为旁路网关的，不少人用旁路网关都有一个共同的想法——不需要再在设备上额外安装各类代理的客户端，我这次也实际体验了树莓派作为旁路网关，运行v2ray使用ws+tls的传输模式来进行科学上网，并记录了速度和性能占用。</p><a id="more"></a><h2 id="自己的体验"><a href="#自己的体验" class="headerlink" title="自己的体验"></a>自己的体验</h2><p>本地是电信100M宽带，使用的代理的代理服务器是之前提到的cn2 gia线路的圣彼得堡服务器，在直接连接5ghz wif且使用主路由作为网关，电脑上运行v2ray客户端时，播放youtube 4k 的速度可以达到65mbps这样，但是如果使用树莓派3b+作为网关且在树莓派上通过PassWall使用v2ray的话，速度只能达到30mbps左右，总的来说树莓派的表现还是比较一般的，当然对于百兆家宽的日常使用也足够了。</p><h2 id="实际测试"><a href="#实际测试" class="headerlink" title="实际测试"></a>实际测试</h2><h3 id="通过旁路由-pi-3b-的代理播放4k视频"><a href="#通过旁路由-pi-3b-的代理播放4k视频" class="headerlink" title="通过旁路由(pi 3b+)的代理播放4k视频"></a>通过旁路由(pi 3b+)的代理播放4k视频</h3><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1151.png" alt=""></p><p>此时的CPU占用，其实并不算特别高，30%左右，如果是4k60fps的话占用会到50%左右，但是资源还是比较充足的。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1153.png" alt=""></p><h3 id="直接使用路由器作为网关，windows运行v2ray客户端"><a href="#直接使用路由器作为网关，windows运行v2ray客户端" class="headerlink" title="直接使用路由器作为网关，windows运行v2ray客户端"></a>直接使用路由器作为网关，windows运行v2ray客户端</h3><p>可以看到这个差异还是相当巨大的。。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1201.png" alt=""></p><h3 id="使用树莓派作为网关，windows运行v2ray客户端"><a href="#使用树莓派作为网关，windows运行v2ray客户端" class="headerlink" title="使用树莓派作为网关，windows运行v2ray客户端"></a>使用树莓派作为网关，windows运行v2ray客户端</h3><p>同样达到了60mbps的速度，此时树莓派的占用很低</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1206.png" alt=""></p><h3 id="单纯测试旁路网关到主路由的速度"><a href="#单纯测试旁路网关到主路由的速度" class="headerlink" title="单纯测试旁路网关到主路由的速度"></a>单纯测试旁路网关到主路由的速度</h3><p>达到了网线的上限，此时也基本没有什么占用</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1157.png" alt=""></p><h2 id="说说测试结果"><a href="#说说测试结果" class="headerlink" title="说说测试结果"></a>说说测试结果</h2><p>树莓派做旁路网关并开启代理并使用服务端为ws+tls的代理的时候，能明显的感觉到性能不足，但是查看cpu占用，各个核心的利用都比较平均，所以一下子我也不知道瓶颈在什么地方。之后我准备在性能强劲得多的x86设备上也运行一个docker openwrt来进行对比。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> 折腾 </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitalk出现 Error: Network Error的解决</title>
      <link href="/posts/gitalk-network-error.html"/>
      <url>/posts/gitalk-network-error.html</url>
      
        <content type="html"><![CDATA[<h1 id="gitalk出现Network-Error"><a href="#gitalk出现Network-Error" class="headerlink" title="gitalk出现Network Error"></a>gitalk出现Network Error</h1><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1123.png" alt=""></p><p>一开始在配置这个主题自带的gitalk时，遇到了一个问题，输入client id与client secret后，gitalk依旧提示<strong>network error</strong>，在网上找了很久都没解决这个问题，我一度放弃了gitalk转而使用valine，但是考虑到valine有个大问题那就是无法通知到被评论人以及评论人，如果没有消息通知的话，他人留下的评论即使得到了回复他也看不了到了呀。而gitalk基于issues就很好的解决了这个问题。所以最后还是在多次尝试之下解决了这个问题，一句话概括我遇到的问题(也许还有其他问题可能会导致网络错误) <strong>OAuth App的 Homepage URL 以及 Authorization callback URL 配置不当会导致Network Error的发生</strong></p><h2 id="如何配置OAuth-App"><a href="#如何配置OAuth-App" class="headerlink" title="如何配置OAuth App"></a>如何配置OAuth App</h2><p>请查看我的配置</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/1121.png" alt=""></p><p><strong>注意</strong>，Homepage url只需要填page的地址，而非.git的git仓库地址，另外如果你使用了自定义域名，Authorization callback URL请使用你的自定义域名。</p><h2 id="插件配置中还要注意的"><a href="#插件配置中还要注意的" class="headerlink" title="插件配置中还要注意的"></a>插件配置中还要注意的</h2><p>除了上面那两个配置要注意之外，还有一点需要注意，那就是插件配置文件中的<strong>repo(至少对于hexo是这样)</strong>，对应的不是你的仓库地址，而是仓库名，如<strong>havocw.github.io</strong>。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 建站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派docker部署openwrt</title>
      <link href="/posts/docker-openwrt.html"/>
      <url>/posts/docker-openwrt.html</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派docker旁路由尝鲜"><a href="#树莓派docker旁路由尝鲜" class="headerlink" title="树莓派docker旁路由尝鲜"></a>树莓派docker旁路由尝鲜</h1><blockquote><p>这篇文章记录了我是如何使用docker来配置软路由的，但是这种做法不仅适用于树莓派，其实也适用于其它的arm设备，甚至不同架构的设备(注意docker镜像的架构即可)。这是我第一次接触软路由，有什么问题请指正。</p><p>码字不易，转载请注明出处</p></blockquote><p>多少人的树莓派买来新鲜了一阵子就丢在一旁吃灰了？虽然我的树莓派还好，被我用来做了无线ap以及挂上了smokeping,没事还拿来挂挂bt之类的，不过是否还能有更大的用处呢？之前对于软路由早有耳闻，由于我家的主路由器输入Tenda AC10这种只能使用官方固件且不可刷系统的设备，折腾的空间小了很多，没啥可玩性，所以考虑使用树莓派作为旁路由接入网络。</p><p>使用到的设备:</p><ul><li>天翼光猫进行网络拨号</li><li>腾达AC10通过网线接到光猫</li><li>树莓派3b+通过网线和AC10相连(虽然树莓派3b+的“千兆无线网”接的是USB2.0实际只能达到300Mbps的传输速率，而AC10虽然可玩性不高但是好歹是个全端口千兆的路由器，其实还是树莓派4更加适合作为软路由来玩，不过由于我家的网络只有百兆，所以这些都无所谓了)</li></ul><h2 id="关于树莓派系统"><a href="#关于树莓派系统" class="headerlink" title="关于树莓派系统"></a>关于树莓派系统</h2><p>树莓派的性能已经比大部分几百块钱的路由器强大很多了，如果专门刷一个openwrt总有些大材小用的感觉，所以我选择系统刷debian64，使用docker运行openwrt。</p><p>关于系统镜像，因为原版的raspbian在树莓派的处理器升级成64位之后几年都没有支持64位，所以推荐使用一个64位系统，充分发挥树莓派的性能。这里推荐使用<a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64" target="_blank" rel="noopener">树莓派爱好者基地</a>的<strong><a href="https://github.com/openfans-community-offical/Debian-Pi-Aarch64" target="_blank" rel="noopener">Debian-Pi-Aarch64</a></strong>系统镜像，优化了性能，并且提供了webui等小工具，装好系统后不需要显示器即可配置，如果没有桌面需求的话建议直接装无桌面版那个就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0551.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0553.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="docker部署openwrt"><a href="#docker部署openwrt" class="headerlink" title="docker部署openwrt"></a>docker部署openwrt</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><h4 id="安装docker并配置镜像"><a href="#安装docker并配置镜像" class="headerlink" title="安装docker并配置镜像"></a>安装docker并配置镜像</h4><p>首先安装docker</p><pre class=" language-bash"><code class="language-bash">apt <span class="token function">install</span> docker</code></pre><p>然后考虑到原版的源在国内下载缓慢，所以更换为阿里镜像源</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://md4nbj2f.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>EOF<span class="token comment" spellcheck="true"># 重载配置文件</span><span class="token function">sudo</span> systemctl daemon-reload   <span class="token comment" spellcheck="true"># 重启docker  </span><span class="token function">sudo</span> systemctl restart docker</code></pre><h4 id="准备网卡并建立虚拟网络"><a href="#准备网卡并建立虚拟网络" class="headerlink" title="准备网卡并建立虚拟网络"></a>准备网卡并建立虚拟网络</h4><p>开启网卡的混杂模式</p><p><code>sudo ip link set eth0 promisc on</code></p><blockquote><p><strong>混杂模式</strong>（英语：promiscuous mode）是<a href="https://zh.wikipedia.org/wiki/电脑网络" target="_blank" rel="noopener">电脑网络</a>中的术语。是指一台机器的<a href="https://zh.wikipedia.org/wiki/网卡" target="_blank" rel="noopener">网卡</a>能够接收所有经过它的数据流，而不论其目的地址是否是它。</p><p>一般计算机网卡都工作在非混杂模式下，此时网卡只接受来自网络端口的目的地址指向自己的数据。当网卡工作在混杂模式下时，网卡将来自接口的所有数据都捕获并交给相应的驱动程序。网卡的混杂模式一般在网络管理员分析网络数据作为网络故障诊断手段时用到，同时这个模式也被网络<a href="https://zh.wikipedia.org/wiki/黑客" target="_blank" rel="noopener">黑客</a>利用来作为网络数据窃听的入口。在<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a>操作系统中设置网卡混杂模式时需要管理员权限。在<a href="https://zh.wikipedia.org/wiki/Windows" target="_blank" rel="noopener">Windows</a>操作系统和Linux操作系统中都有使用混杂模式的<a href="https://zh.wikipedia.org/wiki/嗅探" target="_blank" rel="noopener">抓包</a>工具，比如著名的开源软件<a href="https://zh.wikipedia.org/wiki/Wireshark" target="_blank" rel="noopener">Wireshark</a>。</p></blockquote><p>然后我们需要创建一个<strong>macvlan</strong>模式的docker虚拟网络。关于docker网络模式的详解可以参考下面两篇文章:</p><ul><li><a href="https://ctimbai.github.io/2019/04/14/tech/docker-macvlan/" target="_blank" rel="noopener">https://ctimbai.github.io/2019/04/14/tech/docker-macvlan/</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1OTY2MzMxOQ==&mid=2247484015&idx=1&sn=8a8d9d3d3c89bbf8e9ed11e0a4b8d0ac&chksm=ea7436d7dd03bfc17434da984365b4a14917d3cb8931365c335fbab22851496fe8bf5c0a6d56&scene=21#wechat_redirect" target="_blank" rel="noopener">Docker 容器网络之单主机网络</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1OTY2MzMxOQ==&mid=2247484056&idx=1&sn=d67971f00e5a19ea0cb880f84122bc59&chksm=ea743620dd03bf363d5b38be69412e19c8ae6395f5310b189a44ce4078fae354d1fa0c786889&scene=21#wechat_redirect" target="_blank" rel="noopener">容器网络之多主机网络</a></li></ul><p>使用命令</p><p><code>docker network create -d macvlan --subnet=192.168.0.0/24 --gateway=192.168.0.1 -o parent=eth0 macnet</code></p><p>注意，请根据自己的网络环修改参数，如我的主路由(AC10)的ip为192.168.0.1而ip段为192.168.0.0/24。</p><p>创建后，使用<code>docker network ls</code>即可查看已有网络。</p><h4 id="获取镜像并启动容器"><a href="#获取镜像并启动容器" class="headerlink" title="获取镜像并启动容器"></a>获取镜像并启动容器</h4><p>我使用的docker image是<a href="https://hub.docker.com/r/buddyfly/openwrt-aarch64" target="_blank" rel="noopener">buddyfly/openwrt-aarch64</a>,先把镜像pull下来。</p><p><code>docker pull buddyfly/openwrt-aarch64</code></p><p>然后创建一个docker网络</p><p>然后使用命令创建了一个名为openwrt的容器并运行.</p><pre class=" language-bash"><code class="language-bash">docker run --name openwrt --restart always -d --network macnet --privileged buddyfly/openwrt-aarch64:latest</code></pre><h4 id="修改容器网络参数"><a href="#修改容器网络参数" class="headerlink" title="修改容器网络参数"></a>修改容器网络参数</h4><p>进入容器</p><p><code>docker exec -it openwrt /bin/bash</code></p><p>修改网络参数</p><p><code>vi /etc/config/network</code></p><pre><code>config interface &#39;loopback&#39;        option ifname &#39;lo&#39;        option proto &#39;static&#39;        option ipaddr &#39;127.0.0.1&#39;        option netmask &#39;255.0.0.0&#39;config globals &#39;globals&#39;        option ula_prefix &#39;fde3:bd8c:2f68::/48&#39;config interface &#39;lan&#39;        option type &#39;bridge&#39;        option ifname &#39;eth0&#39;        option proto &#39;static&#39;        option ipaddr &#39;192.168.0.10&#39;        option netmask &#39;255.255.255.0&#39;        option gateway &#39;192.168.0.1&#39;        option dns &#39;192.168.0.1&#39;</code></pre><p>这里有三项是需要修改(添加)的，option gateway和option dns设置为主路由的ip，option ipaddr对应的ip则是这个“openwrt设别“在局域网内的ip，只需要设置个合理的值即可。</p><p>配置好之后使用<code>/etc/init.d/network restart</code>重启网络，这时候局域网内便会多出一个192.168.0.10的设备</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0350.png" alt=""></p><h4 id="配置openwrt"><a href="#配置openwrt" class="headerlink" title="配置openwrt"></a>配置openwrt</h4><p>这时候访问192.168.0.10即可看见openwrt的登陆界面，默认密码为password</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0622.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0623.png" alt=""></p><p>到这里还没结束，我们还需要修改几个配置</p><ol><li><p>前往 网络-&gt;接口-&gt;LAN修改-&gt;DHCP服务 选择不在此接口提供dhcp服务</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0625.png" alt=""></p></li><li><p>我个人在后来的使用时，出现了代理时使用GFW模式时，部分网站无法访问的情况，大概是因为我本地没有ipv6而软路由给我分配了ipv6的缘故，只需要把ipv6分配长度改为<strong>禁用</strong>即可。</p><p>到这里基本就大功告成了！剩下的就是<del>体验软路由</del>继续折腾了。</p></li></ol><h2 id="使用openwrt作为旁路由"><a href="#使用openwrt作为旁路由" class="headerlink" title="使用openwrt作为旁路由"></a>使用openwrt作为旁路由</h2><p>旁路网关接入网络后我们需要使流量经由旁路网关再进入互联网，有两种模式</p><h3 id="全局流量自动经过旁路由"><a href="#全局流量自动经过旁路由" class="headerlink" title="全局流量自动经过旁路由"></a>全局流量自动经过旁路由</h3><p>该方案不需要自己在电脑连接网络的时候再手动设置网关，所有流量自动经过旁路由，需要修改主路由的dhcp服务器网关以及dns为旁路由的ip，然后重启所有设备。很多原版固件的路由器是做不到的。而我则是因为路由器(AC10)并不负责拨号,而是在光猫内置的路由处拨号，所以不能指定和光猫不同的网段，所以暂时没办法测试。</p><h3 id="手动设置网关，使流量经过旁路由"><a href="#手动设置网关，使流量经过旁路由" class="headerlink" title="手动设置网关，使流量经过旁路由"></a>手动设置网关，使流量经过旁路由</h3><p>以win10为例，在网络选择上点击属性，编辑ip设置，修改网关和dns为旁路由的ip</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0708.png" alt=""></p><p>   保存之后重新连接，之后你所有的流量都会先经过软路由了。</p><h2 id="软路由功能体验"><a href="#软路由功能体验" class="headerlink" title="软路由功能体验"></a>软路由功能体验</h2><h3 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h3><p>不少人使用旁路由设备是为了能够不额外安装客户端的情况下进行科学上网，那么我们也首先来进行代理的配置，这个镜像内置了ShadowSocksR Plus+以及PassWall，这里我就以PassWall为例了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0730.png" alt=""></p><p>在节点列表里面添加节点并启用，然后在基础设置里面选择好TCP节点，UDP节点和Socks5节点我都设置成与TCP节点相同了，然后默认代理模式和本机代理模式我都设置成了GFW名单，因为如果仅仅是绕过大陆ip的话还是会出现不少问题，毕竟不少国内网站使用了国外的服务器，一来浪费流量而来拖慢了访问速度。对于特定网站可以再结合chrome的switch omega插件+本地socks5代理或者干脆在PassWall的访问控制里面添加记录。</p><p>配置好之后直接在电脑上访问youtube，流畅播放~ <em>如果出现了无法访问部分网站的情况，请查看上面我是怎么关闭ipv6分配的，说不定有效果。</em></p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0744.png" alt=""></p><p>查看此时的CPU占用，看起来还是比较高的…也还好我家只是百兆宽带</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/2020032020/03/0745.png" alt=""></p><h3 id="其它的一些功能"><a href="#其它的一些功能" class="headerlink" title="其它的一些功能"></a>其它的一些功能</h3><h4 id="状态监控"><a href="#状态监控" class="headerlink" title="状态监控"></a>状态监控</h4><p>该镜像内置了netdata,只需要访问旁路由ip:19999即可进入上面那张图的页面，查看路由器（树莓派）的实时详细信息。自带的服务里面还有不少的插件，不过我还没有一一去尝试，欢迎大家自己搭建一个来尝尝鲜，好好利用起树莓派í ½í¸。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="旁路由同时开启ap"><a href="#旁路由同时开启ap" class="headerlink" title="旁路由同时开启ap"></a>旁路由同时开启ap</h4><p>其实这时候树莓派除了能用来做旁路由还能同时用来创建无线ap(至少直接在debian里面是可以的，openwrt里面我还没试过)，参考项目<a href="https://github.com/oblique/create_ap" target="_blank" rel="noopener">createap</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5e62711fe51d4526e91f5a1b#heading-6" target="_blank" rel="noopener">树莓派不再吃灰 (二) Docker中使用openwrt做旁路网关</a></p><p><a href="[http://jkdigger.me/2019/11/29/n1-openwrt%E6%97%81%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/](http://jkdigger.me/2019/11/29/n1-openwrt旁路由设置/)">n1-openwrt旁路由设置</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派使用docker快速搭建Smokeping</title>
      <link href="/posts/raspi-smokeping.html"/>
      <url>/posts/raspi-smokeping.html</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派使用docker快速部署Smokeping"><a href="#树莓派使用docker快速部署Smokeping" class="headerlink" title="树莓派使用docker快速部署Smokeping"></a>树莓派使用docker快速部署Smokeping</h1><blockquote><p>Smokeping 是一款用于网络状况监测的工具，安装好之后它可以持续的记录到各个服务器的网络状况如ping值丢包率等等…并生成易读性高的可视化图表，如果想查看你的一台服务器的网络到手上其他服务器的网络的联通状况，或者你纯粹是想看你这台机器到各个区域，各大网站的联通状况都可以使用。考虑到需要长期运行，如果你需要在你的家中某台设备上安装Smokeping，树莓派是个不错的选择。</p></blockquote><p>Smokeping的<a href="[https://wiki.archlinux.org/index.php/Smokeping_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)](https://wiki.archlinux.org/index.php/Smokeping_(简体中文))">常规安装</a>较为复杂，好在已有人做出了docker镜像，并支持x86-64 arm64 armhf架构，所以直接使用docker来快速安装即可 dockerhub链接如下 <a href="https://github.com/linuxserver/docker-smokeping" target="_blank" rel="noopener">linuxserver/smokeping</a></p><h2 id="使用docker快速安装"><a href="#使用docker快速安装" class="headerlink" title="使用docker快速安装"></a>使用docker快速安装</h2><p>新建/home/scripts/smoke/文件夹用于映射smokeping相关数据。注意如果pull下面这个镜像较为缓慢的话可以考虑更换docker国内源。</p><p><em>更换国内源的方法，编辑/etc/docker/daemon.json</em></p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>然后重启docker即可。</p><pre class=" language-shell"><code class="language-shell">docker create \  --name=smokeping \  -e PUID=1000 \  -e PGID=1000 \  -e TZ=Asia/Shanghai \  -p 80:80 \  -v /home/scripts/smoke/config:/config \  -v /home/scripts/smoke/data:/data \  --restart unless-stopped \  linuxserver/smokeping</code></pre><p>pull完成之后使用<code>docker container ls</code>找到对应的container id(其实安装完之后也有提示)使用<code>docker start id</code>先启动该容器，启动会有一点慢，启动好之后配置文件应该都在config文件夹里面了。</p><h2 id="配置Smokeping"><a href="#配置Smokeping" class="headerlink" title="配置Smokeping"></a>配置Smokeping</h2><p>这个版本的smokeping和网上大多数教程中的配置文件有一些不一样。如果需要添加监测对象需要在<code>Targets</code>里面添加。</p><p>下面是一份配置示例 </p><pre><code>*** Targets ***probe = FPingmenu = Toptitle = Pingremark = Smokeping on raspberry pi.+ SERVERmenu = Server Pingtitle = Ping status+ Other menu = 三大网络监控 title = 监控统计 ++ dianxin menu = 电信网络监控 title = 电信网络监控列表 host = /Other/dianxin/dianxin-bj /Other/dianxin/dianxin-hlj /Other/dianxin/dianxin-tj /Other/dianxin/dianxin-sc /Other/dianxin/dianxin-sh /Other/dianxin/dianxin-gz +++ dianxin-bj menu = 北京电信 title = 北京电信 alerts = someloss host = 202.96.199.133 +++ dianxin-hlj menu = 黑龙江电信 title = 黑龙江电信 alerts = someloss host = 219.147.198.242 +++ dianxin-tj menu = 天津电信 title = 天津电信 alerts = someloss host = 219.150.32.132 +++ dianxin-sc menu = 四川电信 title = 四川电信 alerts = someloss host = 61.139.2.69 +++ dianxin-sh menu = 上海电信 title = 上海电信 alerts = someloss host = 116.228.111.118 +++ dianxin-gz menu = 广东电信 title = 广东电信 alerts = someloss host = 113.111.211.22 ++ liantong menu = 联通网络监控 title = 联通网络监控列表 host = /Other/liantong/liantong-bj /Other/liantong/liantong-hlj /Other/liantong/liantong-tj /Other/liantong/liantong-sc /Other/liantong/liantong-sh /Other/liantong/liantong-gz +++ liantong-bj menu = 北京联通 title = 北京联通 alerts = someloss host = 61.135.169.121 +++ liantong-hlj menu = 黑龙江联通 title = 黑龙江联通 alerts = someloss host = 202.97.224.69 +++ liantong-tj menu = 天津联通 title = 天津联通 alerts = someloss host = 202.99.96.68 +++ liantong-sc menu = 四川联通 title = 四川联通 alerts = someloss host = 119.6.6.6 +++ liantong-sh menu = 上海联通 title = 上海联通 alerts = someloss host = 210.22.84.3 +++ liantong-gz menu = 广东联通 title = 广东联通 alerts = someloss host = 221.5.88.88 ++ yidong menu = 移动网络监控 title = 移动网络监控列表 host = /Other/yidong/yidong-bj /Other/yidong/yidong-hlj /Other/yidong/yidong-tj /Other/yidong/yidong-sc /Other/yidong/yidong-sh /Other/yidong/yidong-gz  +++ yidong-bj menu = 北京移动 title = 北京移动 alerts = someloss host = 221.130.33.52 +++ yidong-hlj menu = 黑龙江移动 title = 黑龙江移动 alerts = someloss host = 211.137.241.35 +++ yidong-tj menu = 天津移动 title = 天津移动 alerts = someloss host = 211.137.160.5 +++ yidong-sc menu = 四川移动 title = 四川移动 alerts = someloss host = 218.201.4.3 +++ yidong-sh menu = 上海移动 title = 上海移动 alerts = someloss host = 117.131.19.23 +++ yidong-gz menu = 广东移动title = 广东移动alerts = somelosshost = 211.136.192.6</code></pre><p>编辑完成之后使用<code>docker restart 容器id</code>重启容器，之后访问树莓派ip:80就可以看到页面了，刚开始运行的十几分钟是不会有图表的，过一段时间再看就有了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/2020032020/03/2216.png" alt=""></p><h2 id="解决中文字体显示方块的问题"><a href="#解决中文字体显示方块的问题" class="headerlink" title="解决中文字体显示方块的问题"></a>解决中文字体显示方块的问题</h2><p>如果我们使用了中文的命名，我们会发现Smokeping里面生成的图片中的中文不正常，因为该docker中缺少了中文字体，我们使用下列的操作进行安装。</p><pre class=" language-shell"><code class="language-shell">#该镜像的使用的系统镜像是apline，所以软件的安装有一些不同docker exec -it id /bin/bash#安装文泉驿字体echo @edge http://nl.alpinelinux.org/alpine/edge/testing >> /etc/apk/repositories && apk add wqy-zenhei@edgeapk add wqy-zenhei --update-cache --repository http://nl.alpinelinux.org/alpine/edge/testing --allow-untrusted</code></pre><p>之后刷新网页，中文已经可以正常显示了。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 网络工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zeptovm圣彼得堡 欧洲方向的cn2gia线路</title>
      <link href="/posts/zeptovm-vps.html"/>
      <url>/posts/zeptovm-vps.html</url>
      
        <content type="html"><![CDATA[<h1 id="Zeptovm-圣彼得堡CN2-GIA线路vps"><a href="#Zeptovm-圣彼得堡CN2-GIA线路vps" class="headerlink" title="Zeptovm 圣彼得堡CN2 GIA线路vps"></a>Zeptovm 圣彼得堡CN2 GIA线路vps</h1><p>3.19更新 <strong>他家最近涨价+减量了，新用户涨价到10美元500GB，连老用户的流量都减少50%，<del>的确不太厚道</del>虽然发了邮件..但是直到4.20号流量依旧是双向1TB，而且速度依旧可以跑满百兆，还是相当推荐的..</strong><br>近来我国到美西得线路堵得不行，CN2 GT压根对不上他的“CN2”的名头，对于电信来说无论是丢包率还是速度都快劣化成163骨干网了。而CN2 GIA(下文简称GIA)又传出因为部分机房偷偷修改自己的GT线路为GIA线路受到电信整顿，并且前往美西的GIA线路也长期处于高负荷运行。这段时间，不少商家调高了自家CN2 GIA线路的价格，前段时间”搬瓦工”下架了所有GIA线路的产品，再次补货后，原来的49.9美元年付机器竟然绝版了…可以说现在的美西方向的GIA在价格上去的同时，没有以往那么香了。</p><p>在大多数人对于美西GIA趋之若鹜的时候，可以看看欧洲方向的vps，本文介绍的是Zeptovm的圣彼得堡GIA vps。</p><blockquote><p>备注</p><ul><li>圣彼得堡的vps的ip应该都还未被Netflix封锁，可以看俄区。</li><li>他家不支持退款</li><li>三网去程走自己的网络(电信走GIA)，回程三网GIA</li><li><strong>他家最近涨价+减量了，连老用户的流量都减少50%，的确不太厚道</strong></li></ul></blockquote><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>圣彼得堡的vps网络指明本地10Gbps，中国方向100Mbps。最低配8美元一个月，1024GB流量(双向)，Intel(R) Xeon(R) CPU E5-2678 v3 @ 2.50GHz 1核，500MB内存10GB SSD。super测试截图如下。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/20200308203630.png" alt=""></p><ul><li>他家磁盘io很优秀</li><li>本地的确是10G口</li><li>三网表现都比较稳定，但是移动并不算稳，如果只用移动还是考虑其它的vps吧</li><li>性能和网络都可以，做网站或者代理都是不错的选择</li><li>虽然是俄罗斯的机器，但是可以访问telegram<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle"   style="display:block; text-align:center;"   data-ad-layout="in-article"   data-ad-format="fluid"   data-ad-client="ca-pub-6914153309632048"   data-ad-slot="8639851589"></ins><script>   (adsbygoogle = window.adsbygoogle || []).push({});</script></li></ul><h2 id="详细测试"><a href="#详细测试" class="headerlink" title="详细测试"></a>详细测试</h2><p>以下测试都在今日21:00左右进行</p><h3 id="延迟测试"><a href="#延迟测试" class="headerlink" title="延迟测试"></a>延迟测试</h3><p>先说个人体验，华南地区电信，测试到搬瓦工DC6机房(162.244.241.102)的ping值为175ms左右,而到Zeptovm圣彼得堡(185.209.85.100)的ping值为160ms左右。因为圣彼得堡电信是走北京出口的，华北地区体验应该是最佳的，大概在110ms以内。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/smokeping.png" alt=""></p><h4 id="多个地点ping"><a href="#多个地点ping" class="headerlink" title="多个地点ping"></a>多个地点ping</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/20200308201803.png" alt=""></p><h4 id="ping-pe"><a href="#ping-pe" class="headerlink" title="ping.pe"></a>ping.pe</h4><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/20200308202012.png" alt=""></p><p>这个ping值在全球来说都比较优秀了，而且基本无丢包，但是得注意如果你经常访问的网站都处于亚太地区，尤其是东南亚区域，那么还是要三思，毕竟先到欧洲再从欧洲访问到东南亚最后再回来 ，这个路绕的太远了，相反的如果你访问欧洲的网站较多（当然各大型网站基本每个区域都有服务器，这个是不用担心的）,另外用它来加速欧服游戏也是相当不错的选择。</p><h3 id="速度测试"><a href="#速度测试" class="headerlink" title="速度测试"></a>速度测试</h3><p>到speedtest各地节点的测试</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/20200308205057.png" alt=""></p><h4 id="iperf3速度测试-单线程到南方电信"><a href="#iperf3速度测试-单线程到南方电信" class="headerlink" title="iperf3速度测试(单线程到南方电信)"></a>iperf3速度测试(单线程到南方电信)</h4><p>21:00晚高峰测试</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/20200308204729.png" alt=""></p><p>说好大陆方向100M就真的能差不多跑到100M，比起市面上那些标称<strong>G口</strong>实际上100M都跑不到的产品要优秀得多了，虽然比不上搬瓦工的常规款2.5Gbps，但是毕竟价格较低流量也较多，年付使用<del>优惠码64美元</del>（当前无优惠码，月付8美元年付80美元）比瓦工49美元只多了15美元(瓦工49美元机器目前还缺货中，买不到瓦工的可以考虑试试)，每个月流量多了500G，注意如果用来翻墙的话流量请折半算，也就是说瓦工的500GB只剩下250GB可用了，对于用户稍微多几个人的情况流量还是略微有点不足的。如果不是特别追求高速(比如想达到几百mbps的测速)的人还是挺合适的。</p><h4 id="路由测试"><a href="#路由测试" class="headerlink" title="路由测试"></a>路由测试</h4><h5 id="三网去程路由"><a href="#三网去程路由" class="headerlink" title="三网去程路由"></a>三网去程路由</h5><p>在测试中三网去程都是走自己的线路,电信走GIA,<strong>移动绕路严重</strong></p><h6 id="电信"><a href="#电信" class="headerlink" title="电信"></a>电信</h6><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/stroute1.png" alt=""></p><h6 id="联通"><a href="#联通" class="headerlink" title="联通"></a>联通</h6><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/stroute2.png" alt=""></p><h6 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h6><h5 id="三网回程路由"><a href="#三网回程路由" class="headerlink" title="三网回程路由"></a>三网回程路由</h5><p>商家宣传三网回程都是走GIA的，虽然回程部分路由不可见，但是看延迟和速度的确走的是GIA </p><h6 id="电信-1"><a href="#电信-1" class="headerlink" title="电信"></a>电信</h6><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/2020/03/20200308210547.png" alt=""></p><h6 id="联通-1"><a href="#联通-1" class="headerlink" title="联通"></a>联通</h6><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs//imgs/2020/03/0808.png" alt=""></p><h6 id="移动-1"><a href="#移动-1" class="headerlink" title="移动"></a>移动</h6><h3 id="购买链接"><a href="#购买链接" class="headerlink" title="购买链接"></a>购买链接</h3><p>目前无优惠.最低配每月八美元</p><p>前往购买</p><p>无aff：<a href="https://www.zeptovm.com/" target="_blank" rel="noopener">https://www.zeptovm.com/</a></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> vps评测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vps评测 </tag>
            
            <tag> 俄罗斯vps </tag>
            
            <tag> cn2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单端口中转多个V2ray连接/单端口多用户思路</title>
      <link href="/posts/v2ray-single-port.html"/>
      <url>/posts/v2ray-single-port.html</url>
      
        <content type="html"><![CDATA[<h1 id="单端口中转多个V2ray连接-单端口多用户思路"><a href="#单端口中转多个V2ray连接-单端口多用户思路" class="headerlink" title="单端口中转多个V2ray连接/单端口多用户思路"></a>单端口中转多个V2ray连接/单端口多用户思路</h1><p>最近一年多来，国内的nat商家如雨后春笋一样冒了出来，除了进行端口映射以外，这些nat还有一个主要的用途就是用来中转国际流量，加快大家访问海外资源以及翻墙的速度。但是有时候商家出售的nat只提供十个甚至更少的公网端口，或者有些人不想花太多钱去专门购买一台nat，而是直接选择和别人合租，花十来块钱买一个公网端口的使用权，这时候往往会面临一个尴尬的情况 <em>如果nat提供的端口数量少于自己需要中转的服务器的数量怎么办？</em> ， 或者你想这台nat除了中转代理之外还能用作提供frp等端口映射服务，那端口自然也要节约着用，有这些需求的可以看看这篇文章。 <em>注意如果是“合租”端口的话，这种方法仅仅适用于你能拿到服务器权限或者是docker，如果是他人帮忙设置中转，那就没办法了</em></p><blockquote><p>本教程仅针对于ubuntu中转V2ray的Websocket来说，其他的传输协议以及系统请自行修改</p></blockquote><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h2 id="安装nginx并配置ssl证书"><a href="#安装nginx并配置ssl证书" class="headerlink" title="安装nginx并配置ssl证书"></a>安装nginx并配置ssl证书</h2><p>本文使用nat上的nginx来反代需要中转的目的服务器的端口，由于我需要中转的是websocket+tls的流量，所以是没办法直接使用nginx的80端口传输流量的，所以我们需要先配置ssl证书，有两个方案:</p><h3 id="自签名证书"><a href="#自签名证书" class="headerlink" title="自签名证书"></a>自签名证书</h3><p>(因为中转之前数据只是在国内传输的，用自签名证书也不会出什么问题)</p><p>详情查看<a href="https://www.liaoxuefeng.com/article/990311924891552" target="_blank" rel="noopener">廖雪峰的博客</a>,使用他的脚本</p><pre class=" language-shell"><code class="language-shell">apt install nginxwget https://raw.githubusercontent.com/michaelliao/itranswarp.js/master/conf/ssl/gencert.shbash gencert.sh</code></pre><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/20200308151642.png" alt=""></p><p>执行完脚本后，当前文件夹会生成两个文件，把他们移动到/etc/nginx/ssl中(没有文件夹的话新建就好了)</p><pre class=" language-shell"><code class="language-shell">Copy potato.com.crt to /etc/nginx/ssl/potato.com.crtCopy potato.com.key to /etc/nginx/ssl/potato.com.key</code></pre><p>之后编辑nginx站点配置文件 /etc/nginx/sites-available/default,新增一个服务器记录如下图，端口可以直接选nat的公网端口。</p><pre><code>server {    root /var/www/html;    index index.html index.htm index.nginx-debian.html;    server_name potatoserver.com; # managed by Certbot    listen 444 ssl;    ssl_certificate     /etc/nginx/ssl/potatoserver.com.crt;    ssl_certificate_key /etc/nginx/ssl/potatoserver.com.key;}</code></pre><p>然后使用<code>systemctl restart nginx</code>重启nginx，再访问我们刚才设置的端口就可以了，因为是自签名证书，显示不安全也是正常的了。</p><p><img src="https://cdn.jsdelivr.net/gh/HavocW/iGeekerImgs/imgs/20200308152524.png" alt=""></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="5528448996"></ins><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><h3 id="使用certbot自动配置证书"><a href="#使用certbot自动配置证书" class="headerlink" title="使用certbot自动配置证书"></a>使用certbot自动配置证书</h3><p>在使用自签名证书之前，我采取的是另一种方法，不过现在看来这种方法比较麻烦，就不细说了。大概思路就是，使用<a href="https://certbot.eff.org/lets-encrypt/ubuntubionic-nginx" target="_blank" rel="noopener">certbot</a>,自动配置证书，不过由于nat基本不可能给你分配公网的80/443端口，所以直接这样做是行不通的，我采取的方案是，先把国外的服务器上的web服务器停用，空出80/443端口，再使用frp将nat的本地端口映射到国外的服务器的80/443端口，并将域名解析到国外服务器的ip上，然后在nat上运行certbot，这样就可以间接利用国外服务器的端口来实现自动配置证书了。</p><h2 id="配置nginx反代"><a href="#配置nginx反代" class="headerlink" title="配置nginx反代"></a>配置nginx反代</h2><p>通过nat的ip:公网端口，我们已经可以访问刚才配置好的nginx了，然后我们需要设置nginx反代。此例中，我们需要中转的国外代理服务器上的v2ray已经经过了一次反向代理了(当然没有反代直接暴露端口也是可以的)。假设我们有三个代理服务器，他们都使用443端口的nginx反代，反代url为/fanqiang <em>如传输协议是websocket时，访问example.com/fanqiang会出现Bad Request的提示（因为是websocket）</em>。</p><p>三台服务器的域名分别为</p><ul><li>fq1.example.com</li><li>fq2.example.com</li><li>fq3.example.com</li></ul><p>则我们配置default中的server如下,在之前那个端口为444的server的大括号中添加</p><pre><code>    location /fq1 {     proxy_pass https://fq1.example.com/fanqiang;     proxy_redirect default;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;}    location /fq2 {        proxy_pass https://fq2.example.com/fanqiang;        proxy_redirect default;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;}    location /fq3 {     proxy_pass https://fq3.example.com/fanqiang;     proxy_redirect default;        proxy_http_version 1.1;        proxy_set_header Upgrade $http_upgrade;        proxy_set_header Connection &quot;upgrade&quot;;        proxy_set_header Host $http_host;    }</code></pre><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script><p>配置好后，<code>systemctl restart nginx</code>，再试试访问<a href="https://natip:444/fq1，出现Bad" target="_blank" rel="noopener">https://natip:444/fq1，出现Bad</a> Request就算成功了。之后即可使用单端口来中转多个服务器了。客户端设置以V2rayn为例，地址填写nat的ip，端口填写暴露在公网的nginx的端口，然后路径(path)要改成/fq1这样的形式而不是之前的/fanqiang了。<strong>另外注意，使用中转服务器中转websocket的时候需要填写host，host应为你的目标服务器的域名如 fq2.example.com 手动修改config.json的话需要把tlsSettings的serverName 以及wsSetting的host都改成目标服务器的域名</strong></p><p>自用的话还有个小窍门，比如设置一样的uuid以及url，这样只需要修改v2ray的路径(指客户端的/fq1 /fq2这样的路径)即可快速切换。</p><h2 id="多用户的想法"><a href="#多用户的想法" class="headerlink" title="多用户的想法"></a>多用户的想法</h2><p>虽然v2ray一开始设计的时候没怎么考虑到单端口多用户的情况，但是使用反代的话可以使用多个url来区分不同的用户既可以开多个url然后统计nginx不同url的流量传输情况，也可以开多个代理端口，用多个url来反代，统计每个端口的流量。</p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><p><ins class="adsbygoogle"     style="display:block; text-align:center;"     data-ad-layout="in-article"     data-ad-format="fluid"     data-ad-client="ca-pub-6914153309632048"     data-ad-slot="8639851589"></ins></p><script>     (adsbygoogle = window.adsbygoogle || []).push({});</script>]]></content>
      
      
      <categories>
          
          <category> 网络技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> v2ray </tag>
            
            <tag> 反向代理 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/posts/hello-hexo.html"/>
      <url>/posts/hello-hexo.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-使用笔记"><a href="#Hexo-使用笔记" class="headerlink" title="Hexo 使用笔记"></a>Hexo 使用笔记</h1><h2 id="Front-matter-完整示例"><a href="#Front-matter-完整示例" class="headerlink" title="Front-matter 完整示例"></a>Front-matter 完整示例</h2><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><h2 id="Hexo仓库中包含主题子模块的使用"><a href="#Hexo仓库中包含主题子模块的使用" class="headerlink" title="Hexo仓库中包含主题子模块的使用"></a>Hexo仓库中包含主题子模块的使用</h2><p><a href="https://cloud.tencent.com/developer/news/387061" target="_blank" rel="noopener">https://cloud.tencent.com/developer/news/387061</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
